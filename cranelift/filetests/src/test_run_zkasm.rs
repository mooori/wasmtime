//! Test command for compiling CLIF files to .zkasm, running it, and verifying their results
//!
//! using [RunCommand](cranelift_reader::RunCommand)s.

use crate::runone::FileUpdate;
use crate::subtest::SubTest;
use cranelift_codegen::isa::TargetIsa;
use cranelift_codegen::settings::Flags;
use cranelift_codegen::{self, ir};
use cranelift_reader::{parse_run_command, RunCommand, TestCommand, TestFile};
use std::borrow::Cow;

use crate::zkasm_codegen;

struct TestRunZkasm;

pub fn subtest(parsed: &TestCommand) -> anyhow::Result<Box<dyn SubTest>> {
    assert_eq!(parsed.command, "run-zkasm");
    if !parsed.options.is_empty() {
        anyhow::bail!("No options allowed on {}", parsed);
    }
    Ok(Box::new(TestRunZkasm))
}

impl SubTest for TestRunZkasm {
    fn name(&self) -> &'static str {
        "run-zkasm"
    }

    fn is_mutating(&self) -> bool {
        false
    }

    fn needs_isa(&self) -> bool {
        false
    }

    /// Runs the entire subtest for a given target
    /// TODO: in zkasm we don't really run test for given target, we run for zkasm target
    fn run_target<'a>(
        &self,
        testfile: &TestFile,
        _: &mut FileUpdate,
        _: &'a str,
        _: &'a Flags,
        _: Option<&'a dyn TargetIsa>,
    ) -> anyhow::Result<()> {
        let mut zkasm_functions: Vec<Vec<String>> = Vec::new();
        let mut invocations: Vec<Vec<String>> = Vec::new();
        for (func, details) in &testfile.functions {
            zkasm_functions.push(zkasm_codegen::compile_clif_function(func));
            for comment in details.comments.iter() {
                if let Some(command) = parse_run_command(comment.text, &func.signature)? {
                    match command {
                        RunCommand::Print(_) => {
                            todo!()
                        }
                        RunCommand::Run(invoke, compare, expected) => {
                            invocations
                                .push(zkasm_codegen::compile_invocation(invoke, compare, expected));
                        }
                    }
                }
            }
        }
        let zkasm_program = zkasm_codegen::build_test_zkasm(zkasm_functions, invocations);
        println!("{}", zkasm_program);
        // TODO: instead of printing run program, using something like this:
        // match zkasm_runner::run_zkasm(&zkasm_program) {
        //     // TODO: Probably here is a good place to collect info generated by assert-hostfunction
        //     // and somehow show it
        //     Ok(_) => Ok(()),
        //     Err(e) => Err(e),
        // }
        Ok(())
    }

    fn run(
        &self,
        _func: Cow<ir::Function>,
        _context: &crate::subtest::Context,
    ) -> anyhow::Result<()> {
        unreachable!()
    }
}

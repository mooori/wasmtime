VAR GLOBAL global_0
VAR GLOBAL global_1
VAR GLOBAL global_2
start:
  1048576 :MSTORE(global_0)  ;; Global32(1048576)
  1048619 :MSTORE(global_1)  ;; Global32(1048619)
  1048624 :MSTORE(global_2)  ;; Global32(1048624)
  1048576 => E
  13503953895726638695n :MSTORE(MEM:E + 0)
  11912009169889063794n :MSTORE(MEM:E + 1)
  11170449402626986623n :MSTORE(MEM:E + 2)
  6620516960021240235n :MSTORE(MEM:E + 3)
  8031924123371070824n :MSTORE(MEM:E + 4)
  6581362n :MSTORE(MEM:E + 5)
  0xffff => SP
  zkPC + 2 => RR
  :JMP(function_1)
  :JMP(finalizeExecution)
function_1:
  RR :MSTORE(SP)
  SP - 1 => SP
  C :MSTORE(SP - 1)
  D :MSTORE(SP - 2)
  E :MSTORE(SP - 3)
  B :MSTORE(SP - 4)
  SP - 16 => SP
  $ => A :MLOAD(global_0)
  240n => B  ;; LoadConst32
  $ => A :SUB
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 11)
  A :MSTORE(global_0)
  8n => B  ;; LoadConst32
  $ => D :ADD
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  8n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  0n => C  ;; LoadConst64
  0 => A  ;; LoadExtName(User(userextname0))
  $ => E :ADD
  B :MSTORE(SP + 1)
  C :MSTORE(MEM:E)
  8n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 11)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  16n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  0n => C  ;; LoadConst64
  0 => A  ;; LoadExtName(User(userextname0))
  $ => E :ADD
  B :MSTORE(SP)
  C :MSTORE(MEM:E)
  8n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 11)
  $ => B :ADD
  B => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  24n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  0n => C  ;; LoadConst64
  0 => A  ;; LoadExtName(User(userextname0))
  $ => E :ADD
  B :MSTORE(SP + 10)
  C :MSTORE(MEM:E)
  40n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 11)
  $ => B :ADD
  B => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  B :MSTORE(SP + 9)
  0n => D  ;; LoadConst64
  0 => A  ;; LoadExtName(User(userextname0))
  $ => E :ADD
  D :MSTORE(MEM:E)
  8n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 11)
  $ => C :ADD
  C => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  40n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  B :MSTORE(SP + 8)
  0n => C  ;; LoadConst64
  0 => A  ;; LoadExtName(User(userextname0))
  $ => E :ADD
  C :MSTORE(MEM:E)
  53n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 11)
  $ => D :ADD
  D => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  B :MSTORE(SP + 7)
  0n => C  ;; LoadConst64
  0 => A  ;; LoadExtName(User(userextname0))
  $ => E :ADD
  C :MSTORE(MEM:E)
  0n => C  ;; LoadConst64
  0 => A  ;; LoadExtName(User(userextname0))
  $ => B :MLOAD(SP + 11)
  $ => E :ADD
  C :MSTORE(MEM:E + 8)
  64n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 11)
  $ => B :ADD
  B => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  24n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  B => D
  0n => B  ;; LoadConst32
  0 => A  ;; LoadExtName(User(userextname0))
  $ => E :ADD
  $ => C :MLOAD(MEM:E + 1048600)
  0 => A  ;; LoadExtName(User(userextname0))
  D => B
  $ => E :ADD
  C :MSTORE(MEM:E)
  64n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 11)
  $ => B :ADD
  B => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  16n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  B => C
  0n => B  ;; LoadConst32
  0 => A  ;; LoadExtName(User(userextname0))
  $ => E :ADD
  $ => D :MLOAD(MEM:E + 1048592)
  0 => A  ;; LoadExtName(User(userextname0))
  C => B
  $ => E :ADD
  D :MSTORE(MEM:E)
  64n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 11)
  $ => C :ADD
  C => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  8n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  B => D
  0n => B  ;; LoadConst32
  0 => A  ;; LoadExtName(User(userextname0))
  $ => E :ADD
  $ => C :MLOAD(MEM:E + 1048584)
  0 => A  ;; LoadExtName(User(userextname0))
  D => B
  $ => E :ADD
  C :MSTORE(MEM:E)
  111n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 11)
  $ => D :ADD
  D => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  B => D
  0n => B  ;; LoadConst32
  0 => A  ;; LoadExtName(User(userextname0))
  $ => E :ADD
  $ => C :MLOAD(MEM:E + 1048615)
  0 => A  ;; LoadExtName(User(userextname0))
  D => B
  $ => E :ADD
  C :MSTORE(MEM:E)
  0n => B  ;; LoadConst32
  0 => A  ;; LoadExtName(User(userextname0))
  $ => E :ADD
  $ => C :MLOAD(MEM:E + 1048576)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => B :MLOAD(SP + 11)
  $ => E :ADD
  C :MSTORE(MEM:E + 64)
  0n => C  ;; LoadConst64
  0 => A  ;; LoadExtName(User(userextname0))
  $ => E :ADD
  C :MSTORE(MEM:E + 96)
  0n => B  ;; LoadConst32
  0 => A  ;; LoadExtName(User(userextname0))
  $ => E :ADD
  $ => D :MLOAD(MEM:E + 1048608)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => B :MLOAD(SP + 11)
  $ => E :ADD
  D :MSTORE(MEM:E + 104)
  115n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 11)
  $ => C :ADD
  C => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  B :MSTORE(SP + 6)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => B :MLOAD(SP + 11)
  $ => E :ADD
  $ => C :MLOAD(MEM:E + 8)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => B :MLOAD(SP + 6)
  $ => E :ADD
  C :MSTORE(MEM:E)
  123n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 11)
  $ => D :ADD
  D => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  B => D
  0 => A  ;; LoadExtName(User(userextname0))
  $ => B :MLOAD(SP + 1)
  $ => E :ADD
  $ => C :MLOAD(MEM:E)
  0 => A  ;; LoadExtName(User(userextname0))
  D => B
  $ => E :ADD
  C :MSTORE(MEM:E)
  131n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 11)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  B => D
  0 => A  ;; LoadExtName(User(userextname0))
  $ => B :MLOAD(SP)
  $ => E :ADD
  $ => C :MLOAD(MEM:E)
  0 => A  ;; LoadExtName(User(userextname0))
  D => B
  $ => E :ADD
  C :MSTORE(MEM:E)
  139n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 11)
  $ => B :ADD
  B => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  B => D
  0 => A  ;; LoadExtName(User(userextname0))
  $ => B :MLOAD(SP + 10)
  $ => E :ADD
  $ => C :MLOAD(MEM:E)
  0 => A  ;; LoadExtName(User(userextname0))
  D => B
  $ => E :ADD
  C :MSTORE(MEM:E)
  147n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 11)
  $ => B :ADD
  B => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  B => C
  0 => A  ;; LoadExtName(User(userextname0))
  $ => B :MLOAD(SP + 9)
  $ => E :ADD
  $ => D :MLOAD(MEM:E)
  0 => A  ;; LoadExtName(User(userextname0))
  C => B
  $ => E :ADD
  D :MSTORE(MEM:E)
  155n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 11)
  $ => C :ADD
  C => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  B => D
  0 => A  ;; LoadExtName(User(userextname0))
  $ => B :MLOAD(SP + 8)
  $ => E :ADD
  $ => C :MLOAD(MEM:E)
  0 => A  ;; LoadExtName(User(userextname0))
  D => B
  $ => E :ADD
  C :MSTORE(MEM:E)
  160n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 11)
  $ => D :ADD
  D => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  B => D
  0 => A  ;; LoadExtName(User(userextname0))
  $ => B :MLOAD(SP + 7)
  $ => E :ADD
  $ => C :MLOAD(MEM:E)
  0 => A  ;; LoadExtName(User(userextname0))
  D => B
  $ => E :ADD
  C :MSTORE(MEM:E)
  11n => C  ;; LoadConst32
  0 => A  ;; LoadExtName(User(userextname0))
  $ => B :MLOAD(SP + 11)
  $ => E :ADD
  C :MSTORE(MEM:E + 168)
  172n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 11)
  $ => B :ADD
  B => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  B => D
  4n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 11)
  $ => B :ADD
  B => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  0 => A  ;; LoadExtName(User(userextname0))
  $ => E :ADD
  $ => C :MLOAD(MEM:E)
  0 => A  ;; LoadExtName(User(userextname0))
  D => B
  $ => E :ADD
  C :MSTORE(MEM:E)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => B :MLOAD(SP + 11)
  $ => E :ADD
  $ => D :MLOAD(MEM:E + 1)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => B :MLOAD(SP + 11)
  $ => E :ADD
  D :MSTORE(MEM:E + 169)
  128n => C  ;; LoadConst32
  0 => A  ;; LoadExtName(User(userextname0))
  $ => B :MLOAD(SP + 6)
  $ => E :ADD
  C :MSTORE(MEM:E)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => B :MLOAD(SP + 11)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 96)
  A :MSTORE(SP + 6)
  9n => A  ;; LoadConst64
  63n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 6)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5)
  88n => B  ;; LoadConst64
  $ => A :MLOAD(SP + 5)
  $ => C :OR
  C :MSTORE(SP + 4)
  65024n => B  ;; LoadConst64
  $ => A :MLOAD(SP + 4)
  $ => B :AND
  B => C
  40n => A  ;; LoadConst64
  63n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3)
  16711680n => B  ;; LoadConst64
  $ => A :MLOAD(SP + 4)
  $ => B :AND
  B => D
  24n => A  ;; LoadConst64
  63n => B  ;; LoadConst64
  $ => E :AND
  D => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2)
  4278190080n => B  ;; LoadConst64
  $ => A :MLOAD(SP + 4)
  $ => A :AND
  A => C
  8n => A  ;; LoadConst64
  63n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  $ => A :MLOAD(SP + 2)
  E => B
  $ => B :OR
  $ => A :MLOAD(SP + 3)
  $ => A :OR
  A :MSTORE(SP + 2)
  1n => A  ;; LoadConst64
  63n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 6)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4278190080n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1)
  15n => A  ;; LoadConst64
  63n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 6)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  16711680n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1)
  $ => A :OR
  A :MSTORE(SP + 1)
  31n => A  ;; LoadConst64
  63n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 6)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  65280n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP)
  56n => A  ;; LoadConst64
  63n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 5)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP)
  $ => B :OR
  $ => A :MLOAD(SP + 1)
  $ => B :OR
  $ => A :MLOAD(SP + 2)
  $ => A :OR
  A => E
  64n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 11)
  $ => D :ADD
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  40n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  0n => A  ;; LoadConst32
  A :JMPNZ(label_1_1)
  :JMP(label_1_2)
label_1_1:
  B :MSTORE(SP)
  :JMP(label_1_3)
label_1_2:
  11n => A  ;; LoadConst32
  $ => A :ADD
  B :MSTORE(SP)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  1n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  0n => B  ;; LoadConst32
  52n => C  ;; LoadConst32
  SP - 1 => SP
  C :MSTORE(SP)
  zkPC + 2 => RR
  :JMP(function_4)
  SP + 1 => SP
  :JMP(label_1_3)
label_1_3:
  6341068275337658368n => B  ;; LoadConst64
  E => A
  $ => D :OR
  D :MSTORE(SP + 10)
  11n => A  ;; LoadConst32
  56n => B  ;; LoadConst32
  $ => A :XOR
  8n => B  ;; LoadConst32
  $ => A :LT
  A :JMPNZ(label_1_5)
  160n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 11)
  $ => C :ADD
  C => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  0 => A  ;; LoadExtName(User(userextname0))
  $ => E :ADD
  $ => D :MLOAD(SP + 10)
  D :MSTORE(MEM:E)
  64n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 11)
  $ => D :ADD
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  1n => B  ;; LoadConst32
  SP - 1 => SP
  B :MSTORE(SP)
  $ => B :MLOAD(SP)
  zkPC + 2 => RR
  :JMP(function_2)
  SP + 1 => SP
  :JMP(label_1_6)
label_1_5:
  64n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 11)
  $ => B :ADD
  B => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  1n => C  ;; LoadConst32
  SP - 1 => SP
  C :MSTORE(SP)
  $ => B :MLOAD(SP)
  zkPC + 2 => RR
  :JMP(function_2)
  SP + 1 => SP
  224n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 11)
  $ => B :ADD
  B => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  0n => D  ;; LoadConst64
  0 => A  ;; LoadExtName(User(userextname0))
  $ => E :ADD
  D :MSTORE(MEM:E)
  216n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 11)
  $ => C :ADD
  C => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  0n => C  ;; LoadConst64
  0 => A  ;; LoadExtName(User(userextname0))
  $ => E :ADD
  C :MSTORE(MEM:E)
  208n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 11)
  $ => D :ADD
  D => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  0n => C  ;; LoadConst64
  0 => A  ;; LoadExtName(User(userextname0))
  $ => E :ADD
  C :MSTORE(MEM:E)
  200n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 11)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  0n => C  ;; LoadConst64
  0 => A  ;; LoadExtName(User(userextname0))
  $ => E :ADD
  C :MSTORE(MEM:E)
  192n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 11)
  $ => B :ADD
  B => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  0n => C  ;; LoadConst64
  0 => A  ;; LoadExtName(User(userextname0))
  $ => E :ADD
  C :MSTORE(MEM:E)
  184n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 11)
  $ => B :ADD
  B => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  0n => D  ;; LoadConst64
  0 => A  ;; LoadExtName(User(userextname0))
  $ => E :ADD
  D :MSTORE(MEM:E)
  0n => C  ;; LoadConst64
  0 => A  ;; LoadExtName(User(userextname0))
  $ => B :MLOAD(SP + 11)
  $ => E :ADD
  C :MSTORE(MEM:E + 176)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => E :ADD
  $ => D :MLOAD(SP + 10)
  D :MSTORE(MEM:E + 232)
  64n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 11)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A => D
  176n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 11)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  1n => C  ;; LoadConst32
  SP - 1 => SP
  C :MSTORE(SP)
  D => A
  zkPC + 2 => RR
  :JMP(function_2)
  SP + 1 => SP
  :JMP(label_1_6)
label_1_6:
  0 => A  ;; LoadExtName(User(userextname0))
  $ => B :MLOAD(SP + 11)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 92)
  A :MSTORE(SP + 10)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 88)
  A :MSTORE(SP + 9)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 84)
  A :MSTORE(SP + 8)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 80)
  A :MSTORE(SP + 7)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 76)
  A :MSTORE(SP + 6)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 72)
  A :MSTORE(SP + 5)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 64)
  A :MSTORE(SP + 4)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 4)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2)
  65280n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 4)
  $ => D :AND
  D => C
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2)
  $ => A :OR
  A :MSTORE(SP)
  B :MSTORE(SP + 1)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 4)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP + 3)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 4)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3)
  $ => D :OR
  $ => A :MLOAD(SP)
  B => C
  D => B
  $ => A :OR
  65280n => B  ;; LoadConst32
  $ => D :AND
  D :MSTORE(SP + 2)
  A :MSTORE(SP + 3)
  16n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2)
  $ => A :OR
  A :MSTORE(SP + 2)
  16n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2)
  $ => A :OR
  A => C
  32n => A  ;; LoadConst64
  63n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2)
  4278190080n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 3)
  $ => A :AND
  A :MSTORE(SP + 1)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => B :MLOAD(SP + 11)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 68)
  A :MSTORE(SP)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A => C
  16n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1)
  $ => B :OR
  $ => A :MLOAD(SP + 2)
  $ => A :OR
  A :MSTORE(SP + 3)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP + 2)
  65280n => B  ;; LoadConst32
  $ => A :MLOAD(SP)
  $ => D :AND
  D => C
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A => C
  16n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2)
  $ => B :OR
  $ => A :MLOAD(SP + 3)
  $ => A :OR
  A => C
  8n => A  ;; LoadConst64
  63n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  255n => B  ;; LoadConst32
  $ => A :MLOAD(SP)
  $ => B :AND
  E => A
  $ => A :OR
  13352372148217134600n => B  ;; LoadConst64
  B :ASSERT
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 5)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2)
  65280n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 5)
  $ => E :AND
  E => C
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2)
  $ => A :OR
  A :MSTORE(SP)
  B :MSTORE(SP + 1)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 5)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP + 3)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 5)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3)
  $ => E :OR
  $ => A :MLOAD(SP)
  B => C
  E => B
  $ => A :OR
  65280n => B  ;; LoadConst32
  $ => E :AND
  E :MSTORE(SP + 2)
  A :MSTORE(SP + 3)
  16n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2)
  $ => A :OR
  A :MSTORE(SP + 2)
  16n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2)
  $ => A :OR
  A => C
  32n => A  ;; LoadConst64
  63n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2)
  4278190080n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 3)
  $ => A :AND
  A :MSTORE(SP + 1)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 6)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A => D
  16n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  D => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1)
  $ => B :OR
  $ => A :MLOAD(SP + 2)
  $ => A :OR
  A :MSTORE(SP + 1)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 6)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP)
  65280n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 6)
  $ => E :AND
  E => C
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A => C
  16n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP)
  $ => B :OR
  $ => A :MLOAD(SP + 1)
  $ => A :OR
  A => D
  8n => A  ;; LoadConst64
  63n => B  ;; LoadConst64
  $ => E :AND
  D => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => D
  255n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 6)
  $ => B :AND
  D => A
  $ => A :OR
  11902541952223915002n => B  ;; LoadConst64
  B :ASSERT
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 7)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP)
  65280n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 7)
  $ => B :AND
  B => C
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP)
  $ => A :OR
  A :MSTORE(SP + 1)
  B :MSTORE(SP + 3)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 7)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 7)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP)
  $ => A :OR
  B => D
  A => B
  $ => A :MLOAD(SP + 1)
  $ => A :OR
  65280n => B  ;; LoadConst32
  $ => B :AND
  A :MSTORE(SP)
  B :MSTORE(SP + 2)
  16n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  D => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2)
  $ => A :OR
  A :MSTORE(SP + 2)
  16n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 3)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2)
  $ => A :OR
  A => C
  32n => A  ;; LoadConst64
  63n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2)
  4278190080n => B  ;; LoadConst32
  $ => A :MLOAD(SP)
  $ => A :AND
  A :MSTORE(SP + 1)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 8)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A => C
  16n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1)
  $ => B :OR
  $ => A :MLOAD(SP + 2)
  $ => A :OR
  A :MSTORE(SP + 1)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 8)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP)
  65280n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 8)
  $ => B :AND
  B => D
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  D => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A => C
  16n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP)
  $ => B :OR
  $ => A :MLOAD(SP + 1)
  $ => A :OR
  A => C
  8n => A  ;; LoadConst64
  63n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => C
  255n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 8)
  $ => B :AND
  C => A
  $ => A :OR
  14160706888648589550n => B  ;; LoadConst64
  B :ASSERT
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 9)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP)
  65280n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 9)
  $ => B :AND
  B => D
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  D => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP)
  $ => A :OR
  A :MSTORE(SP)
  B :MSTORE(SP + 2)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 9)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP + 1)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 9)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1)
  $ => C :OR
  $ => A :MLOAD(SP)
  C => D
  B => C
  D => B
  $ => A :OR
  65280n => B  ;; LoadConst32
  $ => B :AND
  B :MSTORE(SP)
  A :MSTORE(SP + 1)
  16n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP)
  $ => A :OR
  A :MSTORE(SP)
  16n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 2)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP)
  $ => A :OR
  A => D
  32n => A  ;; LoadConst64
  63n => B  ;; LoadConst64
  $ => E :AND
  D => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP)
  4278190080n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 1)
  $ => A :AND
  A :MSTORE(SP + 1)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 10)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A => C
  16n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1)
  $ => B :OR
  $ => A :MLOAD(SP)
  $ => A :OR
  A :MSTORE(SP + 1)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 10)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP)
  65280n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 10)
  $ => B :AND
  B => C
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A => D
  16n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  D => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP)
  $ => B :OR
  $ => A :MLOAD(SP + 1)
  $ => A :OR
  A => C
  8n => A  ;; LoadConst64
  63n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => C
  255n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 10)
  $ => B :AND
  C => A
  $ => A :OR
  10414846460208074217n => B  ;; LoadConst64
  B :ASSERT
  240n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 11)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => E :AND
  E :MSTORE(global_0)
  SP + 16 => SP
  $ => C :MLOAD(SP - 1)
  $ => D :MLOAD(SP - 2)
  $ => E :MLOAD(SP - 3)
  $ => B :MLOAD(SP - 4)
  SP + 1 => SP
  $ => RR :MLOAD(SP)
  :JMP(RR)
function_2:
  RR :MSTORE(SP)
  SP - 1 => SP
  C :MSTORE(SP - 1)
  SP - 2 => SP
  $ => C :MLOAD(fp + 16)
  SP - 1 => SP
  C :MSTORE(SP)
  zkPC + 2 => RR
  :JMP(function_3)
  SP + 1 => SP
  SP + 2 => SP
  $ => C :MLOAD(SP - 1)
  SP + 1 => SP
  $ => RR :MLOAD(SP)
  :JMP(RR)
function_3:
  RR :MSTORE(SP)
  SP - 1 => SP
  C :MSTORE(SP - 1)
  D :MSTORE(SP - 2)
  E :MSTORE(SP - 3)
  B :MSTORE(SP - 4)
  SP - 1182 => SP
  A :MSTORE(SP)
  B :MSTORE(SP + 1)
  $ => A :MLOAD(fp + 16)
  A :MSTORE(SP + 2)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => B :MLOAD(SP)
  $ => E :ADD
  $ => D :MLOAD(MEM:E + 28)
  D :MSTORE(SP + 9)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => E :ADD
  $ => C :MLOAD(MEM:E + 24)
  C :MSTORE(SP + 10)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => E :ADD
  $ => C :MLOAD(MEM:E + 20)
  C :MSTORE(SP + 11)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 16)
  A :MSTORE(SP + 12)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => E :ADD
  $ => E :MLOAD(MEM:E + 12)
  E :MSTORE(SP + 13)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => E :ADD
  $ => D :MLOAD(MEM:E + 8)
  D :MSTORE(SP + 14)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => E :ADD
  $ => C :MLOAD(MEM:E + 4)
  C :MSTORE(SP + 15)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => E :ADD
  $ => B :MLOAD(MEM:E)
  B :MSTORE(SP + 16)
  0n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 2)
  $ => A :EQ
  A :JMPNZ(label_3_1)
  :JMP(label_3_2)
label_3_1:
  :JMP(label_3_7)
label_3_2:
  6n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 2)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1)
  $ => D :ADD
  D => A
  4294967295n => B  ;; LoadConst64
  $ => C :AND
  C :MSTORE(SP + 1177)
  $ => C :MLOAD(SP + 1)
  C :MSTORE(SP + 8)
  $ => C :MLOAD(SP + 11)
  C :MSTORE(SP + 7)
  $ => C :MLOAD(SP + 10)
  C :MSTORE(SP + 6)
  $ => C :MLOAD(SP + 12)
  C :MSTORE(SP + 5)
  $ => C :MLOAD(SP + 9)
  C :MSTORE(SP + 4)
  $ => C :MLOAD(SP + 16)
  C :MSTORE(SP + 3)
  $ => C :MLOAD(SP + 14)
  C :MSTORE(SP + 2)
  $ => C :MLOAD(SP + 15)
  C :MSTORE(SP + 1)
  $ => B :MLOAD(SP + 15)
  $ => A :MLOAD(SP + 14)
  :JMP(label_3_3)
label_3_3:
  $ => C :XOR
  C => A
  $ => B :MLOAD(SP + 3)
  $ => A :AND
  $ => B :MLOAD(SP + 1)
  A => D
  $ => A :MLOAD(SP + 2)
  $ => C :AND
  D => A
  C => B
  $ => A :XOR
  A :MSTORE(SP + 1176)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3)
  B :MSTORE(SP + 1174)
  $ => E :MLOAD(SP + 1174)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1175)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1174)
  $ => E :SUB
  $ => A :MLOAD(SP + 3)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1175)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1175)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3)
  B :MSTORE(SP + 1173)
  $ => E :MLOAD(SP + 1173)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1174)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1173)
  $ => E :SUB
  $ => A :MLOAD(SP + 3)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1174)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1175)
  $ => A :XOR
  A :MSTORE(SP + 1173)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3)
  B :MSTORE(SP + 1171)
  $ => E :MLOAD(SP + 1171)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1172)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1171)
  $ => E :SUB
  $ => A :MLOAD(SP + 3)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1172)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1173)
  $ => B :XOR
  $ => A :MLOAD(SP + 1176)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1171)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5)
  B :MSTORE(SP + 1169)
  $ => E :MLOAD(SP + 1169)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1170)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1169)
  $ => E :SUB
  $ => A :MLOAD(SP + 5)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1170)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1170)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5)
  B :MSTORE(SP + 1168)
  $ => E :MLOAD(SP + 1168)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1169)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1168)
  $ => E :SUB
  $ => A :MLOAD(SP + 5)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1169)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1170)
  $ => A :XOR
  A :MSTORE(SP + 1168)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5)
  B :MSTORE(SP + 1166)
  $ => E :MLOAD(SP + 1166)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1167)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1166)
  $ => E :SUB
  $ => A :MLOAD(SP + 5)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1167)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1168)
  $ => B :XOR
  $ => A :MLOAD(SP + 4)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 7)
  A => D
  $ => A :MLOAD(SP + 6)
  $ => C :XOR
  C => A
  $ => B :MLOAD(SP + 5)
  $ => A :AND
  $ => B :MLOAD(SP + 6)
  $ => C :XOR
  C => B
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1166)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => B :MLOAD(SP + 8)
  $ => E :ADD
  $ => A :MLOAD(MEM:E)
  A :MSTORE(SP + 1165)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1165)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1164)
  65280n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 1165)
  $ => B :AND
  B => C
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1164)
  $ => A :OR
  A :MSTORE(SP + 1164)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1165)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP + 1163)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1165)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1163)
  $ => B :OR
  $ => A :MLOAD(SP + 1164)
  $ => B :OR
  $ => A :MLOAD(SP + 1166)
  $ => A :ADD
  B :MSTORE(SP + 1163)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  1116352408n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1171)
  $ => A :ADD
  B :MSTORE(SP + 1162)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1161)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1161)
  B :MSTORE(SP + 1159)
  $ => E :MLOAD(SP + 1159)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1160)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1159)
  $ => E :SUB
  $ => A :MLOAD(SP + 1161)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1160)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1160)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1161)
  B :MSTORE(SP + 1158)
  $ => E :MLOAD(SP + 1158)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1159)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1158)
  $ => E :SUB
  $ => A :MLOAD(SP + 1161)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1159)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1160)
  $ => A :XOR
  A :MSTORE(SP + 1158)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1161)
  B :MSTORE(SP + 1156)
  $ => E :MLOAD(SP + 1156)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1157)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1156)
  $ => E :SUB
  $ => A :MLOAD(SP + 1161)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1157)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1158)
  $ => A :XOR
  $ => B :MLOAD(SP + 3)
  A => D
  $ => A :MLOAD(SP + 1)
  $ => C :XOR
  $ => A :MLOAD(SP + 1161)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 1)
  B => E
  $ => B :MLOAD(SP + 3)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1156)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => B :MLOAD(SP + 8)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 4)
  A :MSTORE(SP + 1155)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1155)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1154)
  65280n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 1155)
  $ => B :AND
  B => C
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1154)
  $ => A :OR
  A :MSTORE(SP + 1154)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1155)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP + 1153)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1155)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1153)
  $ => B :OR
  $ => A :MLOAD(SP + 1154)
  $ => B :OR
  $ => A :MLOAD(SP + 6)
  $ => E :ADD
  E => A
  B :MSTORE(SP + 1153)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 13)
  A => D
  $ => A :MLOAD(SP + 1162)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1152)
  $ => B :MLOAD(SP + 5)
  $ => A :MLOAD(SP + 7)
  $ => C :XOR
  C => B
  $ => A :MLOAD(SP + 1152)
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 7)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1151)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1152)
  B :MSTORE(SP + 1149)
  $ => E :MLOAD(SP + 1149)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1150)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1149)
  $ => E :SUB
  $ => A :MLOAD(SP + 1152)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1150)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1150)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1152)
  B :MSTORE(SP + 1148)
  $ => E :MLOAD(SP + 1148)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1149)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1148)
  $ => E :SUB
  $ => A :MLOAD(SP + 1152)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1149)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1150)
  $ => A :XOR
  A :MSTORE(SP + 1148)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1152)
  B :MSTORE(SP + 1146)
  $ => E :MLOAD(SP + 1146)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1147)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1146)
  $ => E :SUB
  $ => A :MLOAD(SP + 1152)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1147)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1148)
  $ => B :XOR
  $ => A :MLOAD(SP + 1151)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  1899447441n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1156)
  $ => A :ADD
  B :MSTORE(SP + 1146)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1145)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1145)
  B :MSTORE(SP + 1143)
  $ => E :MLOAD(SP + 1143)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1144)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1143)
  $ => E :SUB
  $ => A :MLOAD(SP + 1145)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1144)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1144)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1145)
  B :MSTORE(SP + 1142)
  $ => E :MLOAD(SP + 1142)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1143)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1142)
  $ => E :SUB
  $ => A :MLOAD(SP + 1145)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1143)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1144)
  $ => A :XOR
  A :MSTORE(SP + 1142)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1145)
  B :MSTORE(SP + 1140)
  $ => E :MLOAD(SP + 1140)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1141)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1140)
  $ => E :SUB
  $ => A :MLOAD(SP + 1145)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1141)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1142)
  $ => A :XOR
  $ => B :MLOAD(SP + 3)
  A => D
  $ => A :MLOAD(SP + 1161)
  $ => C :XOR
  $ => A :MLOAD(SP + 1145)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 1161)
  B => E
  $ => B :MLOAD(SP + 3)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1140)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => B :MLOAD(SP + 8)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 8)
  A :MSTORE(SP + 1139)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1139)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1138)
  65280n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 1139)
  $ => B :AND
  B => C
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1138)
  $ => A :OR
  A :MSTORE(SP + 1138)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1139)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP + 1137)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1139)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1137)
  $ => B :OR
  $ => A :MLOAD(SP + 1138)
  $ => B :OR
  $ => A :MLOAD(SP + 7)
  $ => E :ADD
  E => A
  B :MSTORE(SP + 1137)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2)
  A => D
  $ => A :MLOAD(SP + 1146)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1136)
  $ => B :MLOAD(SP + 5)
  $ => A :MLOAD(SP + 1152)
  $ => C :XOR
  $ => A :MLOAD(SP + 1136)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 5)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1135)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1136)
  B :MSTORE(SP + 1133)
  $ => E :MLOAD(SP + 1133)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1134)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1133)
  $ => E :SUB
  $ => A :MLOAD(SP + 1136)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1134)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1134)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1136)
  B :MSTORE(SP + 1132)
  $ => E :MLOAD(SP + 1132)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1133)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1132)
  $ => E :SUB
  $ => A :MLOAD(SP + 1136)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1133)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1134)
  $ => A :XOR
  A :MSTORE(SP + 1132)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1136)
  B :MSTORE(SP + 1130)
  $ => E :MLOAD(SP + 1130)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1131)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1130)
  $ => E :SUB
  $ => A :MLOAD(SP + 1136)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1131)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1132)
  $ => B :XOR
  $ => A :MLOAD(SP + 1135)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  3049323471n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1140)
  $ => A :ADD
  B :MSTORE(SP + 1130)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1129)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1129)
  B :MSTORE(SP + 1127)
  $ => E :MLOAD(SP + 1127)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1128)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1127)
  $ => E :SUB
  $ => A :MLOAD(SP + 1129)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1128)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1128)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1129)
  B :MSTORE(SP + 1126)
  $ => E :MLOAD(SP + 1126)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1127)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1126)
  $ => E :SUB
  $ => A :MLOAD(SP + 1129)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1127)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1128)
  $ => A :XOR
  A :MSTORE(SP + 1126)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1129)
  B :MSTORE(SP + 1124)
  $ => E :MLOAD(SP + 1124)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1125)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1124)
  $ => E :SUB
  $ => A :MLOAD(SP + 1129)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1125)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1126)
  $ => A :XOR
  $ => B :MLOAD(SP + 1161)
  A => D
  $ => A :MLOAD(SP + 1145)
  $ => C :XOR
  $ => A :MLOAD(SP + 1129)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 1145)
  B => E
  $ => B :MLOAD(SP + 1161)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1124)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => B :MLOAD(SP + 8)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 12)
  A :MSTORE(SP + 1123)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1123)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1122)
  65280n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 1123)
  $ => B :AND
  B => C
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1122)
  $ => A :OR
  A :MSTORE(SP + 1122)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1123)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP + 1121)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1123)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1121)
  $ => B :OR
  $ => A :MLOAD(SP + 1122)
  $ => B :OR
  $ => A :MLOAD(SP + 5)
  $ => E :ADD
  E => A
  B :MSTORE(SP + 1121)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1)
  A => D
  $ => A :MLOAD(SP + 1130)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1120)
  $ => B :MLOAD(SP + 1152)
  $ => A :MLOAD(SP + 1136)
  $ => C :XOR
  $ => A :MLOAD(SP + 1120)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 1152)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1119)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1120)
  B :MSTORE(SP + 1117)
  $ => E :MLOAD(SP + 1117)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1118)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1117)
  $ => E :SUB
  $ => A :MLOAD(SP + 1120)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1118)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1118)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1120)
  B :MSTORE(SP + 1116)
  $ => E :MLOAD(SP + 1116)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1117)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1116)
  $ => E :SUB
  $ => A :MLOAD(SP + 1120)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1117)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1118)
  $ => A :XOR
  A :MSTORE(SP + 1116)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1120)
  B :MSTORE(SP + 1114)
  $ => E :MLOAD(SP + 1114)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1115)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1114)
  $ => E :SUB
  $ => A :MLOAD(SP + 1120)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1115)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1116)
  $ => B :XOR
  $ => A :MLOAD(SP + 1119)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  3921009573n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1124)
  $ => A :ADD
  B :MSTORE(SP + 1114)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1113)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1113)
  B :MSTORE(SP + 1111)
  $ => E :MLOAD(SP + 1111)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1112)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1111)
  $ => E :SUB
  $ => A :MLOAD(SP + 1113)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1112)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1112)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1113)
  B :MSTORE(SP + 1110)
  $ => E :MLOAD(SP + 1110)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1111)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1110)
  $ => E :SUB
  $ => A :MLOAD(SP + 1113)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1111)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1112)
  $ => A :XOR
  A :MSTORE(SP + 1110)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1113)
  B :MSTORE(SP + 1108)
  $ => E :MLOAD(SP + 1108)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1109)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1108)
  $ => E :SUB
  $ => A :MLOAD(SP + 1113)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1109)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1110)
  $ => A :XOR
  $ => B :MLOAD(SP + 1145)
  A => E
  $ => A :MLOAD(SP + 1129)
  $ => C :XOR
  $ => A :MLOAD(SP + 1113)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 1129)
  B => D
  $ => B :MLOAD(SP + 1145)
  $ => C :AND
  D => A
  C => B
  $ => B :XOR
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1108)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => B :MLOAD(SP + 8)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 16)
  A :MSTORE(SP + 1107)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1107)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1106)
  65280n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 1107)
  $ => B :AND
  B => D
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  D => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1106)
  $ => A :OR
  A :MSTORE(SP + 1106)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1107)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP + 1105)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1107)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1105)
  $ => B :OR
  $ => A :MLOAD(SP + 1106)
  $ => B :OR
  $ => A :MLOAD(SP + 1152)
  $ => A :ADD
  B :MSTORE(SP + 1105)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 3)
  A => E
  $ => A :MLOAD(SP + 1114)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1104)
  $ => B :MLOAD(SP + 1136)
  $ => A :MLOAD(SP + 1120)
  $ => C :XOR
  $ => A :MLOAD(SP + 1104)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 1136)
  $ => C :XOR
  E => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1103)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1104)
  B :MSTORE(SP + 1101)
  $ => E :MLOAD(SP + 1101)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1102)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1101)
  $ => E :SUB
  $ => A :MLOAD(SP + 1104)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1102)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1102)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1104)
  B :MSTORE(SP + 1100)
  $ => E :MLOAD(SP + 1100)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1101)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1100)
  $ => E :SUB
  $ => A :MLOAD(SP + 1104)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1101)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1102)
  $ => A :XOR
  A :MSTORE(SP + 1100)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1104)
  B :MSTORE(SP + 1098)
  $ => E :MLOAD(SP + 1098)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1099)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1098)
  $ => E :SUB
  $ => A :MLOAD(SP + 1104)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1099)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1100)
  $ => B :XOR
  $ => A :MLOAD(SP + 1103)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  961987163n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1108)
  $ => A :ADD
  B :MSTORE(SP + 1098)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1097)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1097)
  B :MSTORE(SP + 1095)
  $ => E :MLOAD(SP + 1095)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1096)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1095)
  $ => E :SUB
  $ => A :MLOAD(SP + 1097)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1096)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1096)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1097)
  B :MSTORE(SP + 1094)
  $ => E :MLOAD(SP + 1094)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1095)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1094)
  $ => E :SUB
  $ => A :MLOAD(SP + 1097)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1095)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1096)
  $ => A :XOR
  A :MSTORE(SP + 1094)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1097)
  B :MSTORE(SP + 1092)
  $ => E :MLOAD(SP + 1092)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1093)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1092)
  $ => E :SUB
  $ => A :MLOAD(SP + 1097)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1093)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1094)
  $ => A :XOR
  $ => B :MLOAD(SP + 1129)
  A => D
  $ => A :MLOAD(SP + 1113)
  $ => C :XOR
  $ => A :MLOAD(SP + 1097)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 1113)
  B => E
  $ => B :MLOAD(SP + 1129)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1092)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => B :MLOAD(SP + 8)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 20)
  A :MSTORE(SP + 1091)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1091)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1090)
  65280n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 1091)
  $ => B :AND
  B => C
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1090)
  $ => A :OR
  A :MSTORE(SP + 1090)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1091)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP + 1089)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1091)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1089)
  $ => B :OR
  $ => A :MLOAD(SP + 1090)
  $ => A :OR
  $ => B :MLOAD(SP + 1136)
  $ => E :ADD
  A :MSTORE(SP + 1089)
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1161)
  A => D
  $ => A :MLOAD(SP + 1098)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1088)
  $ => B :MLOAD(SP + 1120)
  $ => A :MLOAD(SP + 1104)
  $ => C :XOR
  $ => A :MLOAD(SP + 1088)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 1120)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1087)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1088)
  B :MSTORE(SP + 1085)
  $ => E :MLOAD(SP + 1085)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1086)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1085)
  $ => E :SUB
  $ => A :MLOAD(SP + 1088)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1086)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1086)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1088)
  B :MSTORE(SP + 1084)
  $ => E :MLOAD(SP + 1084)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1085)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1084)
  $ => E :SUB
  $ => A :MLOAD(SP + 1088)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1085)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1086)
  $ => A :XOR
  A :MSTORE(SP + 1084)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1088)
  B :MSTORE(SP + 1082)
  $ => E :MLOAD(SP + 1082)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1083)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1082)
  $ => E :SUB
  $ => A :MLOAD(SP + 1088)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1083)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1084)
  $ => B :XOR
  $ => A :MLOAD(SP + 1087)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  1508970993n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1092)
  $ => A :ADD
  B :MSTORE(SP + 1082)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1081)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1081)
  B :MSTORE(SP + 1079)
  $ => E :MLOAD(SP + 1079)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1080)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1079)
  $ => E :SUB
  $ => A :MLOAD(SP + 1081)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1080)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1080)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1081)
  B :MSTORE(SP + 1078)
  $ => E :MLOAD(SP + 1078)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1079)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1078)
  $ => E :SUB
  $ => A :MLOAD(SP + 1081)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1079)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1080)
  $ => A :XOR
  A :MSTORE(SP + 1078)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1081)
  B :MSTORE(SP + 1076)
  $ => E :MLOAD(SP + 1076)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1077)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1076)
  $ => E :SUB
  $ => A :MLOAD(SP + 1081)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1077)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1078)
  $ => A :XOR
  $ => B :MLOAD(SP + 1113)
  A => D
  $ => A :MLOAD(SP + 1097)
  $ => C :XOR
  $ => A :MLOAD(SP + 1081)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 1097)
  B => E
  $ => B :MLOAD(SP + 1113)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1076)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => B :MLOAD(SP + 8)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 24)
  A :MSTORE(SP + 1075)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1075)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1074)
  65280n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 1075)
  $ => B :AND
  B => C
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1074)
  $ => A :OR
  A :MSTORE(SP + 1074)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1075)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP + 1073)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1075)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1073)
  $ => B :OR
  $ => A :MLOAD(SP + 1074)
  $ => A :OR
  $ => B :MLOAD(SP + 1120)
  $ => E :ADD
  A :MSTORE(SP + 1073)
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1145)
  A => D
  $ => A :MLOAD(SP + 1082)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1072)
  $ => B :MLOAD(SP + 1104)
  $ => A :MLOAD(SP + 1088)
  $ => C :XOR
  $ => A :MLOAD(SP + 1072)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 1104)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1071)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1072)
  B :MSTORE(SP + 1069)
  $ => E :MLOAD(SP + 1069)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1070)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1069)
  $ => E :SUB
  $ => A :MLOAD(SP + 1072)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1070)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1070)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1072)
  B :MSTORE(SP + 1068)
  $ => E :MLOAD(SP + 1068)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1069)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1068)
  $ => E :SUB
  $ => A :MLOAD(SP + 1072)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1069)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1070)
  $ => A :XOR
  A :MSTORE(SP + 1068)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1072)
  B :MSTORE(SP + 1066)
  $ => E :MLOAD(SP + 1066)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1067)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1066)
  $ => E :SUB
  $ => A :MLOAD(SP + 1072)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1067)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1068)
  $ => B :XOR
  $ => A :MLOAD(SP + 1071)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  2453635748n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1076)
  $ => A :ADD
  B :MSTORE(SP + 1066)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1065)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1065)
  B :MSTORE(SP + 1063)
  $ => E :MLOAD(SP + 1063)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1064)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1063)
  $ => E :SUB
  $ => A :MLOAD(SP + 1065)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1064)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1064)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1065)
  B :MSTORE(SP + 1062)
  $ => E :MLOAD(SP + 1062)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1063)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1062)
  $ => E :SUB
  $ => A :MLOAD(SP + 1065)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1063)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1064)
  $ => A :XOR
  A :MSTORE(SP + 1062)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1065)
  B :MSTORE(SP + 1060)
  $ => E :MLOAD(SP + 1060)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1061)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1060)
  $ => E :SUB
  $ => A :MLOAD(SP + 1065)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1061)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1062)
  $ => A :XOR
  $ => B :MLOAD(SP + 1097)
  A => E
  $ => A :MLOAD(SP + 1081)
  $ => C :XOR
  $ => A :MLOAD(SP + 1065)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 1081)
  B => D
  $ => B :MLOAD(SP + 1097)
  $ => C :AND
  D => A
  C => B
  $ => B :XOR
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1060)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => B :MLOAD(SP + 8)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 28)
  A :MSTORE(SP + 1059)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1059)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1058)
  65280n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 1059)
  $ => B :AND
  B => D
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  D => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1058)
  $ => A :OR
  A :MSTORE(SP + 1058)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1059)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP + 1057)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1059)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1057)
  $ => B :OR
  $ => A :MLOAD(SP + 1058)
  $ => A :OR
  $ => B :MLOAD(SP + 1104)
  $ => E :ADD
  A :MSTORE(SP + 1057)
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1129)
  A => D
  $ => A :MLOAD(SP + 1066)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1056)
  $ => B :MLOAD(SP + 1088)
  $ => A :MLOAD(SP + 1072)
  $ => C :XOR
  $ => A :MLOAD(SP + 1056)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 1088)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1055)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1056)
  B :MSTORE(SP + 1053)
  $ => E :MLOAD(SP + 1053)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1054)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1053)
  $ => E :SUB
  $ => A :MLOAD(SP + 1056)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1054)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1054)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1056)
  B :MSTORE(SP + 1052)
  $ => E :MLOAD(SP + 1052)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1053)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1052)
  $ => E :SUB
  $ => A :MLOAD(SP + 1056)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1053)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1054)
  $ => A :XOR
  A :MSTORE(SP + 1052)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1056)
  B :MSTORE(SP + 1050)
  $ => E :MLOAD(SP + 1050)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1051)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1050)
  $ => E :SUB
  $ => A :MLOAD(SP + 1056)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1051)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1052)
  $ => B :XOR
  $ => A :MLOAD(SP + 1055)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  2870763221n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1060)
  $ => A :ADD
  B :MSTORE(SP + 1050)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1049)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1049)
  B :MSTORE(SP + 1047)
  $ => E :MLOAD(SP + 1047)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1048)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1047)
  $ => E :SUB
  $ => A :MLOAD(SP + 1049)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1048)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1048)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1049)
  B :MSTORE(SP + 1046)
  $ => E :MLOAD(SP + 1046)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1047)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1046)
  $ => E :SUB
  $ => A :MLOAD(SP + 1049)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1047)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1048)
  $ => A :XOR
  A :MSTORE(SP + 1046)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1049)
  B :MSTORE(SP + 1044)
  $ => E :MLOAD(SP + 1044)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1045)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1044)
  $ => E :SUB
  $ => A :MLOAD(SP + 1049)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1045)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1046)
  $ => A :XOR
  $ => B :MLOAD(SP + 1081)
  A => D
  $ => A :MLOAD(SP + 1065)
  $ => C :XOR
  $ => A :MLOAD(SP + 1049)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 1065)
  B => E
  $ => B :MLOAD(SP + 1081)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1044)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => B :MLOAD(SP + 8)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 32)
  A :MSTORE(SP + 1043)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1043)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1042)
  65280n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 1043)
  $ => B :AND
  B => C
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1042)
  $ => A :OR
  A :MSTORE(SP + 1042)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1043)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP + 1041)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1043)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1041)
  $ => B :OR
  $ => A :MLOAD(SP + 1042)
  $ => A :OR
  $ => B :MLOAD(SP + 1088)
  $ => E :ADD
  A :MSTORE(SP + 1041)
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1113)
  A => D
  $ => A :MLOAD(SP + 1050)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1040)
  $ => B :MLOAD(SP + 1072)
  $ => A :MLOAD(SP + 1056)
  $ => C :XOR
  $ => A :MLOAD(SP + 1040)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 1072)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1039)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1040)
  B :MSTORE(SP + 1037)
  $ => E :MLOAD(SP + 1037)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1038)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1037)
  $ => E :SUB
  $ => A :MLOAD(SP + 1040)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1038)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1038)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1040)
  B :MSTORE(SP + 1036)
  $ => E :MLOAD(SP + 1036)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1037)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1036)
  $ => E :SUB
  $ => A :MLOAD(SP + 1040)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1037)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1038)
  $ => A :XOR
  A :MSTORE(SP + 1036)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1040)
  B :MSTORE(SP + 1034)
  $ => E :MLOAD(SP + 1034)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1035)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1034)
  $ => E :SUB
  $ => A :MLOAD(SP + 1040)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1035)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1036)
  $ => B :XOR
  $ => A :MLOAD(SP + 1039)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  3624381080n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1044)
  $ => A :ADD
  B :MSTORE(SP + 1034)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1033)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1033)
  B :MSTORE(SP + 1031)
  $ => E :MLOAD(SP + 1031)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1032)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1031)
  $ => E :SUB
  $ => A :MLOAD(SP + 1033)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1032)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1032)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1033)
  B :MSTORE(SP + 1030)
  $ => E :MLOAD(SP + 1030)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1031)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1030)
  $ => E :SUB
  $ => A :MLOAD(SP + 1033)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1031)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1032)
  $ => A :XOR
  A :MSTORE(SP + 1030)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1033)
  B :MSTORE(SP + 1028)
  $ => E :MLOAD(SP + 1028)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1029)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1028)
  $ => E :SUB
  $ => A :MLOAD(SP + 1033)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1029)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1030)
  $ => A :XOR
  $ => B :MLOAD(SP + 1065)
  A => D
  $ => A :MLOAD(SP + 1049)
  $ => C :XOR
  $ => A :MLOAD(SP + 1033)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 1049)
  B => E
  $ => B :MLOAD(SP + 1065)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1028)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => B :MLOAD(SP + 8)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 36)
  A :MSTORE(SP + 1027)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1027)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1026)
  65280n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 1027)
  $ => B :AND
  B => C
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1026)
  $ => A :OR
  A :MSTORE(SP + 1026)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1027)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP + 1025)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1027)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1025)
  $ => B :OR
  $ => A :MLOAD(SP + 1026)
  $ => A :OR
  $ => B :MLOAD(SP + 1072)
  $ => E :ADD
  A :MSTORE(SP + 1025)
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1097)
  A => E
  $ => A :MLOAD(SP + 1034)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1024)
  $ => B :MLOAD(SP + 1056)
  $ => A :MLOAD(SP + 1040)
  $ => C :XOR
  $ => A :MLOAD(SP + 1024)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 1056)
  $ => C :XOR
  E => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1023)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1024)
  B :MSTORE(SP + 1021)
  $ => E :MLOAD(SP + 1021)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1022)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1021)
  $ => E :SUB
  $ => A :MLOAD(SP + 1024)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1022)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1022)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1024)
  B :MSTORE(SP + 1020)
  $ => E :MLOAD(SP + 1020)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1021)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1020)
  $ => E :SUB
  $ => A :MLOAD(SP + 1024)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1021)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1022)
  $ => A :XOR
  A :MSTORE(SP + 1020)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1024)
  B :MSTORE(SP + 1018)
  $ => E :MLOAD(SP + 1018)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1019)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1018)
  $ => E :SUB
  $ => A :MLOAD(SP + 1024)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1019)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1020)
  $ => B :XOR
  $ => A :MLOAD(SP + 1023)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  310598401n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1028)
  $ => A :ADD
  B :MSTORE(SP + 1018)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1017)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1017)
  B :MSTORE(SP + 1015)
  $ => E :MLOAD(SP + 1015)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1016)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1015)
  $ => E :SUB
  $ => A :MLOAD(SP + 1017)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1016)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1016)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1017)
  B :MSTORE(SP + 1014)
  $ => E :MLOAD(SP + 1014)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1015)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1014)
  $ => E :SUB
  $ => A :MLOAD(SP + 1017)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1015)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1016)
  $ => A :XOR
  A :MSTORE(SP + 1014)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1017)
  B :MSTORE(SP + 1012)
  $ => E :MLOAD(SP + 1012)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1013)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1012)
  $ => E :SUB
  $ => A :MLOAD(SP + 1017)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1013)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1014)
  $ => A :XOR
  $ => B :MLOAD(SP + 1049)
  A => D
  $ => A :MLOAD(SP + 1033)
  $ => C :XOR
  $ => A :MLOAD(SP + 1017)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 1033)
  B => E
  $ => B :MLOAD(SP + 1049)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1012)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => B :MLOAD(SP + 8)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 40)
  A :MSTORE(SP + 1011)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1011)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1010)
  65280n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 1011)
  $ => B :AND
  B => C
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1010)
  $ => A :OR
  A :MSTORE(SP + 1010)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1011)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP + 1009)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1011)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1009)
  $ => B :OR
  $ => A :MLOAD(SP + 1010)
  $ => A :OR
  $ => B :MLOAD(SP + 1056)
  $ => E :ADD
  A :MSTORE(SP + 1009)
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1081)
  A => D
  $ => A :MLOAD(SP + 1018)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1008)
  $ => B :MLOAD(SP + 1040)
  $ => A :MLOAD(SP + 1024)
  $ => C :XOR
  $ => A :MLOAD(SP + 1008)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 1040)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1007)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1008)
  B :MSTORE(SP + 1005)
  $ => E :MLOAD(SP + 1005)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1006)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1005)
  $ => E :SUB
  $ => A :MLOAD(SP + 1008)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1006)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1006)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1008)
  B :MSTORE(SP + 1004)
  $ => E :MLOAD(SP + 1004)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1005)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1004)
  $ => E :SUB
  $ => A :MLOAD(SP + 1008)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1005)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1006)
  $ => A :XOR
  A :MSTORE(SP + 1004)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1008)
  B :MSTORE(SP + 1002)
  $ => E :MLOAD(SP + 1002)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1003)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1002)
  $ => E :SUB
  $ => A :MLOAD(SP + 1008)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1003)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1004)
  $ => B :XOR
  $ => A :MLOAD(SP + 1007)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  607225278n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1012)
  $ => A :ADD
  B :MSTORE(SP + 1002)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1001)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1001)
  B :MSTORE(SP + 999)
  $ => E :MLOAD(SP + 999)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1000)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 999)
  $ => E :SUB
  $ => A :MLOAD(SP + 1001)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1000)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1000)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1001)
  B :MSTORE(SP + 998)
  $ => E :MLOAD(SP + 998)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 999)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 998)
  $ => E :SUB
  $ => A :MLOAD(SP + 1001)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 999)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1000)
  $ => A :XOR
  A :MSTORE(SP + 998)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1001)
  B :MSTORE(SP + 996)
  $ => E :MLOAD(SP + 996)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 997)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 996)
  $ => E :SUB
  $ => A :MLOAD(SP + 1001)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 997)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 998)
  $ => A :XOR
  $ => B :MLOAD(SP + 1033)
  A => D
  $ => A :MLOAD(SP + 1017)
  $ => C :XOR
  $ => A :MLOAD(SP + 1001)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 1017)
  B => E
  $ => B :MLOAD(SP + 1033)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 996)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => B :MLOAD(SP + 8)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 44)
  A :MSTORE(SP + 995)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 995)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 994)
  65280n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 995)
  $ => B :AND
  B => C
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 994)
  $ => A :OR
  A :MSTORE(SP + 994)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 995)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP + 993)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 995)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 993)
  $ => B :OR
  $ => A :MLOAD(SP + 994)
  $ => A :OR
  $ => B :MLOAD(SP + 1040)
  $ => E :ADD
  A :MSTORE(SP + 993)
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1065)
  A => D
  $ => A :MLOAD(SP + 1002)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 992)
  $ => B :MLOAD(SP + 1024)
  $ => A :MLOAD(SP + 1008)
  $ => C :XOR
  $ => A :MLOAD(SP + 992)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 1024)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 991)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 992)
  B :MSTORE(SP + 989)
  $ => E :MLOAD(SP + 989)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 990)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 989)
  $ => E :SUB
  $ => A :MLOAD(SP + 992)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 990)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 990)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 992)
  B :MSTORE(SP + 988)
  $ => E :MLOAD(SP + 988)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 989)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 988)
  $ => E :SUB
  $ => A :MLOAD(SP + 992)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 989)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 990)
  $ => A :XOR
  A :MSTORE(SP + 988)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 992)
  B :MSTORE(SP + 986)
  $ => E :MLOAD(SP + 986)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 987)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 986)
  $ => E :SUB
  $ => A :MLOAD(SP + 992)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 987)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 988)
  $ => B :XOR
  $ => A :MLOAD(SP + 991)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  1426881987n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 996)
  $ => A :ADD
  B :MSTORE(SP + 986)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 985)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 985)
  B :MSTORE(SP + 983)
  $ => E :MLOAD(SP + 983)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 984)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 983)
  $ => E :SUB
  $ => A :MLOAD(SP + 985)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 984)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 984)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 985)
  B :MSTORE(SP + 982)
  $ => E :MLOAD(SP + 982)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 983)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 982)
  $ => E :SUB
  $ => A :MLOAD(SP + 985)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 983)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 984)
  $ => A :XOR
  A :MSTORE(SP + 982)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 985)
  B :MSTORE(SP + 980)
  $ => E :MLOAD(SP + 980)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 981)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 980)
  $ => E :SUB
  $ => A :MLOAD(SP + 985)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 981)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 982)
  $ => A :XOR
  $ => B :MLOAD(SP + 1017)
  A => E
  $ => A :MLOAD(SP + 1001)
  $ => C :XOR
  $ => A :MLOAD(SP + 985)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 1001)
  B => D
  $ => B :MLOAD(SP + 1017)
  $ => C :AND
  D => A
  C => B
  $ => B :XOR
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 980)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => B :MLOAD(SP + 8)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 48)
  A :MSTORE(SP + 979)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 979)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 978)
  65280n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 979)
  $ => B :AND
  B => D
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  D => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 978)
  $ => A :OR
  A :MSTORE(SP + 978)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 979)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP + 977)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 979)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 977)
  $ => B :OR
  $ => A :MLOAD(SP + 978)
  $ => A :OR
  $ => B :MLOAD(SP + 1024)
  $ => E :ADD
  A :MSTORE(SP + 977)
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1049)
  A => D
  $ => A :MLOAD(SP + 986)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 976)
  $ => B :MLOAD(SP + 1008)
  $ => A :MLOAD(SP + 992)
  $ => C :XOR
  $ => A :MLOAD(SP + 976)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 1008)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 975)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 976)
  B :MSTORE(SP + 973)
  $ => E :MLOAD(SP + 973)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 974)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 973)
  $ => E :SUB
  $ => A :MLOAD(SP + 976)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 974)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 974)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 976)
  B :MSTORE(SP + 972)
  $ => E :MLOAD(SP + 972)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 973)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 972)
  $ => E :SUB
  $ => A :MLOAD(SP + 976)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 973)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 974)
  $ => A :XOR
  A :MSTORE(SP + 972)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 976)
  B :MSTORE(SP + 970)
  $ => E :MLOAD(SP + 970)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 971)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 970)
  $ => E :SUB
  $ => A :MLOAD(SP + 976)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 971)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 972)
  $ => B :XOR
  $ => A :MLOAD(SP + 975)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  1925078388n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 980)
  $ => A :ADD
  B :MSTORE(SP + 970)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 969)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 969)
  B :MSTORE(SP + 967)
  $ => E :MLOAD(SP + 967)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 968)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 967)
  $ => E :SUB
  $ => A :MLOAD(SP + 969)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 968)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 968)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 969)
  B :MSTORE(SP + 966)
  $ => E :MLOAD(SP + 966)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 967)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 966)
  $ => E :SUB
  $ => A :MLOAD(SP + 969)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 967)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 968)
  $ => A :XOR
  A :MSTORE(SP + 966)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 969)
  B :MSTORE(SP + 964)
  $ => E :MLOAD(SP + 964)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 965)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 964)
  $ => E :SUB
  $ => A :MLOAD(SP + 969)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 965)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 966)
  $ => A :XOR
  $ => B :MLOAD(SP + 1001)
  A => D
  $ => A :MLOAD(SP + 985)
  $ => C :XOR
  $ => A :MLOAD(SP + 969)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 985)
  B => E
  $ => B :MLOAD(SP + 1001)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 964)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => B :MLOAD(SP + 8)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 52)
  A :MSTORE(SP + 963)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 963)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 962)
  65280n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 963)
  $ => B :AND
  B => C
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 962)
  $ => A :OR
  A :MSTORE(SP + 962)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 963)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP + 961)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 963)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 961)
  $ => B :OR
  $ => A :MLOAD(SP + 962)
  $ => A :OR
  $ => B :MLOAD(SP + 1008)
  $ => E :ADD
  A :MSTORE(SP + 961)
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1033)
  A => D
  $ => A :MLOAD(SP + 970)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 960)
  $ => B :MLOAD(SP + 992)
  $ => A :MLOAD(SP + 976)
  $ => C :XOR
  $ => A :MLOAD(SP + 960)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 992)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 959)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 960)
  B :MSTORE(SP + 957)
  $ => E :MLOAD(SP + 957)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 958)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 957)
  $ => E :SUB
  $ => A :MLOAD(SP + 960)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 958)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 958)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 960)
  B :MSTORE(SP + 956)
  $ => E :MLOAD(SP + 956)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 957)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 956)
  $ => E :SUB
  $ => A :MLOAD(SP + 960)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 957)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 958)
  $ => A :XOR
  A :MSTORE(SP + 956)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 960)
  B :MSTORE(SP + 954)
  $ => E :MLOAD(SP + 954)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 955)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 954)
  $ => E :SUB
  $ => A :MLOAD(SP + 960)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 955)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 956)
  $ => B :XOR
  $ => A :MLOAD(SP + 959)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  2162078206n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 964)
  $ => A :ADD
  B :MSTORE(SP + 954)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 953)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 953)
  B :MSTORE(SP + 951)
  $ => E :MLOAD(SP + 951)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 952)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 951)
  $ => E :SUB
  $ => A :MLOAD(SP + 953)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 952)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 952)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 953)
  B :MSTORE(SP + 950)
  $ => E :MLOAD(SP + 950)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 951)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 950)
  $ => E :SUB
  $ => A :MLOAD(SP + 953)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 951)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 952)
  $ => A :XOR
  A :MSTORE(SP + 950)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 953)
  B :MSTORE(SP + 948)
  $ => E :MLOAD(SP + 948)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 949)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 948)
  $ => E :SUB
  $ => A :MLOAD(SP + 953)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 949)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 950)
  $ => A :XOR
  $ => B :MLOAD(SP + 985)
  A => D
  $ => A :MLOAD(SP + 969)
  $ => C :XOR
  $ => A :MLOAD(SP + 953)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 969)
  B => E
  $ => B :MLOAD(SP + 985)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 948)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => B :MLOAD(SP + 8)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 56)
  A :MSTORE(SP + 947)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 947)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 946)
  65280n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 947)
  $ => B :AND
  B => C
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 946)
  $ => A :OR
  A :MSTORE(SP + 946)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 947)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP + 945)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 947)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 945)
  $ => B :OR
  $ => A :MLOAD(SP + 946)
  $ => A :OR
  $ => B :MLOAD(SP + 992)
  A :MSTORE(SP + 945)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1017)
  A => D
  $ => A :MLOAD(SP + 954)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 944)
  $ => B :MLOAD(SP + 976)
  $ => A :MLOAD(SP + 960)
  $ => C :XOR
  $ => A :MLOAD(SP + 944)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 976)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 943)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 944)
  B :MSTORE(SP + 941)
  $ => E :MLOAD(SP + 941)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 942)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 941)
  $ => E :SUB
  $ => A :MLOAD(SP + 944)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 942)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 942)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 944)
  B :MSTORE(SP + 940)
  $ => E :MLOAD(SP + 940)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 941)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 940)
  $ => E :SUB
  $ => A :MLOAD(SP + 944)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 941)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 942)
  $ => A :XOR
  A :MSTORE(SP + 940)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 944)
  B :MSTORE(SP + 938)
  $ => E :MLOAD(SP + 938)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 939)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 938)
  $ => E :SUB
  $ => A :MLOAD(SP + 944)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 939)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 940)
  $ => B :XOR
  $ => A :MLOAD(SP + 943)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  2614888103n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 948)
  $ => A :ADD
  B :MSTORE(SP + 938)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 937)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 937)
  B :MSTORE(SP + 935)
  $ => E :MLOAD(SP + 935)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 936)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 935)
  $ => E :SUB
  $ => A :MLOAD(SP + 937)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 936)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 936)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 937)
  B :MSTORE(SP + 934)
  $ => E :MLOAD(SP + 934)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 935)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 934)
  $ => E :SUB
  $ => A :MLOAD(SP + 937)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 935)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 936)
  $ => A :XOR
  A :MSTORE(SP + 934)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 937)
  B :MSTORE(SP + 932)
  $ => E :MLOAD(SP + 932)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 933)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 932)
  $ => E :SUB
  $ => A :MLOAD(SP + 937)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 933)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 934)
  $ => A :XOR
  $ => B :MLOAD(SP + 969)
  A => E
  $ => A :MLOAD(SP + 953)
  $ => C :XOR
  $ => A :MLOAD(SP + 937)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 953)
  B => D
  $ => B :MLOAD(SP + 969)
  $ => C :AND
  D => A
  C => B
  $ => B :XOR
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 932)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => B :MLOAD(SP + 8)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 60)
  A :MSTORE(SP + 931)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 931)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 930)
  65280n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 931)
  $ => B :AND
  B => D
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  D => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 930)
  $ => A :OR
  A :MSTORE(SP + 930)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 931)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP + 929)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 931)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 929)
  $ => B :OR
  $ => A :MLOAD(SP + 930)
  $ => A :OR
  $ => B :MLOAD(SP + 976)
  A :MSTORE(SP + 929)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1001)
  A => E
  $ => A :MLOAD(SP + 938)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 928)
  $ => B :MLOAD(SP + 960)
  $ => A :MLOAD(SP + 944)
  $ => C :XOR
  $ => A :MLOAD(SP + 928)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 960)
  $ => C :XOR
  E => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 927)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 928)
  B :MSTORE(SP + 925)
  $ => E :MLOAD(SP + 925)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 926)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 925)
  $ => E :SUB
  $ => A :MLOAD(SP + 928)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 926)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 926)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 928)
  B :MSTORE(SP + 924)
  $ => E :MLOAD(SP + 924)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 925)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 924)
  $ => E :SUB
  $ => A :MLOAD(SP + 928)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 925)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 926)
  $ => A :XOR
  A :MSTORE(SP + 924)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 928)
  B :MSTORE(SP + 922)
  $ => E :MLOAD(SP + 922)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 923)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 922)
  $ => E :SUB
  $ => A :MLOAD(SP + 928)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 923)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 924)
  $ => B :XOR
  $ => A :MLOAD(SP + 927)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  3248222580n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 932)
  $ => A :ADD
  B :MSTORE(SP + 922)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 921)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 921)
  B :MSTORE(SP + 919)
  $ => E :MLOAD(SP + 919)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 920)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 919)
  $ => E :SUB
  $ => A :MLOAD(SP + 921)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 920)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 920)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 921)
  B :MSTORE(SP + 918)
  $ => E :MLOAD(SP + 918)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 919)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 918)
  $ => E :SUB
  $ => A :MLOAD(SP + 921)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 919)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 920)
  $ => A :XOR
  A :MSTORE(SP + 918)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 921)
  B :MSTORE(SP + 916)
  $ => E :MLOAD(SP + 916)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 917)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 916)
  $ => E :SUB
  $ => A :MLOAD(SP + 921)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 917)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 918)
  $ => A :XOR
  $ => B :MLOAD(SP + 953)
  A => D
  $ => A :MLOAD(SP + 937)
  $ => C :XOR
  $ => A :MLOAD(SP + 921)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 937)
  B => E
  $ => B :MLOAD(SP + 953)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 916)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1153)
  B :MSTORE(SP + 914)
  $ => E :MLOAD(SP + 914)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 915)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 914)
  $ => E :SUB
  $ => A :MLOAD(SP + 1153)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 915)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 915)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1153)
  B :MSTORE(SP + 913)
  $ => E :MLOAD(SP + 913)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 914)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 913)
  $ => E :SUB
  $ => A :MLOAD(SP + 1153)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 914)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 915)
  $ => A :XOR
  A :MSTORE(SP + 913)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1153)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 913)
  $ => A :XOR
  $ => B :MLOAD(SP + 1163)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1025)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 913)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 945)
  B :MSTORE(SP + 911)
  $ => E :MLOAD(SP + 911)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 912)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 911)
  $ => E :SUB
  $ => A :MLOAD(SP + 945)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 912)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 912)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 945)
  B :MSTORE(SP + 910)
  $ => E :MLOAD(SP + 910)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 911)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 910)
  $ => E :SUB
  $ => A :MLOAD(SP + 945)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 911)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 912)
  $ => A :XOR
  A :MSTORE(SP + 910)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 945)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 910)
  $ => B :XOR
  $ => A :MLOAD(SP + 913)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 960)
  A :MSTORE(SP + 910)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 985)
  A => D
  $ => A :MLOAD(SP + 922)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 909)
  $ => B :MLOAD(SP + 944)
  $ => A :MLOAD(SP + 928)
  $ => C :XOR
  $ => A :MLOAD(SP + 909)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 944)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 908)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 909)
  B :MSTORE(SP + 906)
  $ => E :MLOAD(SP + 906)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 907)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 906)
  $ => E :SUB
  $ => A :MLOAD(SP + 909)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 907)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 907)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 909)
  B :MSTORE(SP + 905)
  $ => E :MLOAD(SP + 905)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 906)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 905)
  $ => E :SUB
  $ => A :MLOAD(SP + 909)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 906)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 907)
  $ => A :XOR
  A :MSTORE(SP + 905)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 909)
  B :MSTORE(SP + 903)
  $ => E :MLOAD(SP + 903)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 904)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 903)
  $ => E :SUB
  $ => A :MLOAD(SP + 909)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 904)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 905)
  $ => B :XOR
  $ => A :MLOAD(SP + 908)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  3835390401n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 916)
  $ => A :ADD
  B :MSTORE(SP + 903)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 902)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 902)
  B :MSTORE(SP + 900)
  $ => E :MLOAD(SP + 900)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 901)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 900)
  $ => E :SUB
  $ => A :MLOAD(SP + 902)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 901)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 901)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 902)
  B :MSTORE(SP + 899)
  $ => E :MLOAD(SP + 899)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 900)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 899)
  $ => E :SUB
  $ => A :MLOAD(SP + 902)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 900)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 901)
  $ => A :XOR
  A :MSTORE(SP + 899)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 902)
  B :MSTORE(SP + 897)
  $ => E :MLOAD(SP + 897)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 898)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 897)
  $ => E :SUB
  $ => A :MLOAD(SP + 902)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 898)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 899)
  $ => A :XOR
  $ => B :MLOAD(SP + 937)
  A => D
  $ => A :MLOAD(SP + 921)
  $ => C :XOR
  $ => A :MLOAD(SP + 902)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 921)
  B => E
  $ => B :MLOAD(SP + 937)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 897)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1137)
  B :MSTORE(SP + 895)
  $ => E :MLOAD(SP + 895)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 896)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 895)
  $ => E :SUB
  $ => A :MLOAD(SP + 1137)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 896)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 896)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1137)
  B :MSTORE(SP + 894)
  $ => E :MLOAD(SP + 894)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 895)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 894)
  $ => E :SUB
  $ => A :MLOAD(SP + 1137)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 895)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 896)
  $ => A :XOR
  A :MSTORE(SP + 894)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1137)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 894)
  $ => A :XOR
  $ => B :MLOAD(SP + 1153)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1009)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 894)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 929)
  B :MSTORE(SP + 892)
  $ => E :MLOAD(SP + 892)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 893)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 892)
  $ => E :SUB
  $ => A :MLOAD(SP + 929)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 893)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 893)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 929)
  B :MSTORE(SP + 891)
  $ => E :MLOAD(SP + 891)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 892)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 891)
  $ => E :SUB
  $ => A :MLOAD(SP + 929)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 892)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 893)
  $ => A :XOR
  A :MSTORE(SP + 891)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 929)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 891)
  $ => B :XOR
  $ => A :MLOAD(SP + 894)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 944)
  A :MSTORE(SP + 891)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 969)
  A => D
  $ => A :MLOAD(SP + 903)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 890)
  $ => B :MLOAD(SP + 928)
  $ => A :MLOAD(SP + 909)
  $ => C :XOR
  $ => A :MLOAD(SP + 890)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 928)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 889)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 890)
  B :MSTORE(SP + 887)
  $ => E :MLOAD(SP + 887)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 888)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 887)
  $ => E :SUB
  $ => A :MLOAD(SP + 890)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 888)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 888)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 890)
  B :MSTORE(SP + 886)
  $ => E :MLOAD(SP + 886)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 887)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 886)
  $ => E :SUB
  $ => A :MLOAD(SP + 890)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 887)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 888)
  $ => A :XOR
  A :MSTORE(SP + 886)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 890)
  B :MSTORE(SP + 884)
  $ => E :MLOAD(SP + 884)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 885)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 884)
  $ => E :SUB
  $ => A :MLOAD(SP + 890)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 885)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 886)
  $ => B :XOR
  $ => A :MLOAD(SP + 889)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  4022224774n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 897)
  $ => A :ADD
  B :MSTORE(SP + 884)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 883)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 883)
  B :MSTORE(SP + 881)
  $ => E :MLOAD(SP + 881)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 882)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 881)
  $ => E :SUB
  $ => A :MLOAD(SP + 883)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 882)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 882)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 883)
  B :MSTORE(SP + 880)
  $ => E :MLOAD(SP + 880)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 881)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 880)
  $ => E :SUB
  $ => A :MLOAD(SP + 883)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 881)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 882)
  $ => A :XOR
  A :MSTORE(SP + 880)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 883)
  B :MSTORE(SP + 878)
  $ => E :MLOAD(SP + 878)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 879)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 878)
  $ => E :SUB
  $ => A :MLOAD(SP + 883)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 879)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 880)
  $ => A :XOR
  $ => B :MLOAD(SP + 921)
  A => E
  $ => A :MLOAD(SP + 902)
  $ => C :XOR
  $ => A :MLOAD(SP + 883)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 902)
  B => D
  $ => B :MLOAD(SP + 921)
  $ => C :AND
  D => A
  C => B
  $ => B :XOR
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 878)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1121)
  B :MSTORE(SP + 876)
  $ => E :MLOAD(SP + 876)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 877)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 876)
  $ => E :SUB
  $ => A :MLOAD(SP + 1121)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 877)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 877)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1121)
  B :MSTORE(SP + 875)
  $ => E :MLOAD(SP + 875)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 876)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 875)
  $ => E :SUB
  $ => A :MLOAD(SP + 1121)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 876)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 877)
  $ => A :XOR
  A :MSTORE(SP + 875)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1121)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 875)
  $ => A :XOR
  $ => B :MLOAD(SP + 1137)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 993)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 875)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 910)
  B :MSTORE(SP + 873)
  $ => E :MLOAD(SP + 873)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 874)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 873)
  $ => E :SUB
  $ => A :MLOAD(SP + 910)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 874)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 874)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 910)
  B :MSTORE(SP + 872)
  $ => E :MLOAD(SP + 872)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 873)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 872)
  $ => E :SUB
  $ => A :MLOAD(SP + 910)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 873)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 874)
  $ => A :XOR
  A :MSTORE(SP + 872)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 910)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 872)
  $ => B :XOR
  $ => A :MLOAD(SP + 875)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 928)
  A :MSTORE(SP + 872)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 953)
  A => D
  $ => A :MLOAD(SP + 884)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 871)
  $ => B :MLOAD(SP + 909)
  $ => A :MLOAD(SP + 890)
  $ => C :XOR
  $ => A :MLOAD(SP + 871)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 909)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 870)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 871)
  B :MSTORE(SP + 868)
  $ => E :MLOAD(SP + 868)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 869)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 868)
  $ => E :SUB
  $ => A :MLOAD(SP + 871)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 869)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 869)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 871)
  B :MSTORE(SP + 867)
  $ => E :MLOAD(SP + 867)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 868)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 867)
  $ => E :SUB
  $ => A :MLOAD(SP + 871)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 868)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 869)
  $ => A :XOR
  A :MSTORE(SP + 867)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 871)
  B :MSTORE(SP + 865)
  $ => E :MLOAD(SP + 865)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 866)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 865)
  $ => E :SUB
  $ => A :MLOAD(SP + 871)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 866)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 867)
  $ => B :XOR
  $ => A :MLOAD(SP + 870)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  264347078n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 878)
  $ => A :ADD
  B :MSTORE(SP + 865)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 864)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 864)
  B :MSTORE(SP + 862)
  $ => E :MLOAD(SP + 862)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 863)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 862)
  $ => E :SUB
  $ => A :MLOAD(SP + 864)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 863)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 863)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 864)
  B :MSTORE(SP + 861)
  $ => E :MLOAD(SP + 861)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 862)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 861)
  $ => E :SUB
  $ => A :MLOAD(SP + 864)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 862)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 863)
  $ => A :XOR
  A :MSTORE(SP + 861)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 864)
  B :MSTORE(SP + 859)
  $ => E :MLOAD(SP + 859)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 860)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 859)
  $ => E :SUB
  $ => A :MLOAD(SP + 864)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 860)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 861)
  $ => A :XOR
  $ => B :MLOAD(SP + 902)
  A => D
  $ => A :MLOAD(SP + 883)
  $ => C :XOR
  $ => A :MLOAD(SP + 864)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 883)
  B => E
  $ => B :MLOAD(SP + 902)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 859)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1105)
  B :MSTORE(SP + 857)
  $ => E :MLOAD(SP + 857)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 858)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 857)
  $ => E :SUB
  $ => A :MLOAD(SP + 1105)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 858)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 858)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1105)
  B :MSTORE(SP + 856)
  $ => E :MLOAD(SP + 856)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 857)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 856)
  $ => E :SUB
  $ => A :MLOAD(SP + 1105)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 857)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 858)
  $ => A :XOR
  A :MSTORE(SP + 856)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1105)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 856)
  $ => A :XOR
  $ => B :MLOAD(SP + 1121)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 977)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 856)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 891)
  B :MSTORE(SP + 854)
  $ => E :MLOAD(SP + 854)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 855)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 854)
  $ => E :SUB
  $ => A :MLOAD(SP + 891)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 855)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 855)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 891)
  B :MSTORE(SP + 853)
  $ => E :MLOAD(SP + 853)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 854)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 853)
  $ => E :SUB
  $ => A :MLOAD(SP + 891)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 854)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 855)
  $ => A :XOR
  A :MSTORE(SP + 853)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 891)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 853)
  $ => B :XOR
  $ => A :MLOAD(SP + 856)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 909)
  A :MSTORE(SP + 853)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 937)
  A => D
  $ => A :MLOAD(SP + 865)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 852)
  $ => B :MLOAD(SP + 890)
  $ => A :MLOAD(SP + 871)
  $ => C :XOR
  $ => A :MLOAD(SP + 852)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 890)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 851)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 852)
  B :MSTORE(SP + 849)
  $ => E :MLOAD(SP + 849)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 850)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 849)
  $ => E :SUB
  $ => A :MLOAD(SP + 852)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 850)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 850)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 852)
  B :MSTORE(SP + 848)
  $ => E :MLOAD(SP + 848)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 849)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 848)
  $ => E :SUB
  $ => A :MLOAD(SP + 852)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 849)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 850)
  $ => A :XOR
  A :MSTORE(SP + 848)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 852)
  B :MSTORE(SP + 846)
  $ => E :MLOAD(SP + 846)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 847)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 846)
  $ => E :SUB
  $ => A :MLOAD(SP + 852)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 847)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 848)
  $ => B :XOR
  $ => A :MLOAD(SP + 851)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  604807628n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 859)
  $ => A :ADD
  B :MSTORE(SP + 846)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 845)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 845)
  B :MSTORE(SP + 843)
  $ => E :MLOAD(SP + 843)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 844)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 843)
  $ => E :SUB
  $ => A :MLOAD(SP + 845)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 844)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 844)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 845)
  B :MSTORE(SP + 842)
  $ => E :MLOAD(SP + 842)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 843)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 842)
  $ => E :SUB
  $ => A :MLOAD(SP + 845)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 843)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 844)
  $ => A :XOR
  A :MSTORE(SP + 842)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 845)
  B :MSTORE(SP + 840)
  $ => E :MLOAD(SP + 840)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 841)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 840)
  $ => E :SUB
  $ => A :MLOAD(SP + 845)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 841)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 842)
  $ => A :XOR
  $ => B :MLOAD(SP + 883)
  A => D
  $ => A :MLOAD(SP + 864)
  $ => C :XOR
  $ => A :MLOAD(SP + 845)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 864)
  B => E
  $ => B :MLOAD(SP + 883)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 840)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1089)
  B :MSTORE(SP + 838)
  $ => E :MLOAD(SP + 838)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 839)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 838)
  $ => E :SUB
  $ => A :MLOAD(SP + 1089)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 839)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 839)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1089)
  B :MSTORE(SP + 837)
  $ => E :MLOAD(SP + 837)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 838)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 837)
  $ => E :SUB
  $ => A :MLOAD(SP + 1089)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 838)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 839)
  $ => A :XOR
  A :MSTORE(SP + 837)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1089)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 837)
  $ => A :XOR
  $ => B :MLOAD(SP + 1105)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 961)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 837)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 872)
  B :MSTORE(SP + 835)
  $ => E :MLOAD(SP + 835)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 836)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 835)
  $ => E :SUB
  $ => A :MLOAD(SP + 872)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 836)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 836)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 872)
  B :MSTORE(SP + 834)
  $ => E :MLOAD(SP + 834)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 835)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 834)
  $ => E :SUB
  $ => A :MLOAD(SP + 872)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 835)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 836)
  $ => A :XOR
  A :MSTORE(SP + 834)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 872)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 834)
  $ => B :XOR
  $ => A :MLOAD(SP + 837)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 890)
  A :MSTORE(SP + 834)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 921)
  A => E
  $ => A :MLOAD(SP + 846)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 833)
  $ => B :MLOAD(SP + 871)
  $ => A :MLOAD(SP + 852)
  $ => C :XOR
  $ => A :MLOAD(SP + 833)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 871)
  $ => C :XOR
  E => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 832)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 833)
  B :MSTORE(SP + 830)
  $ => E :MLOAD(SP + 830)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 831)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 830)
  $ => E :SUB
  $ => A :MLOAD(SP + 833)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 831)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 831)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 833)
  B :MSTORE(SP + 829)
  $ => E :MLOAD(SP + 829)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 830)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 829)
  $ => E :SUB
  $ => A :MLOAD(SP + 833)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 830)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 831)
  $ => A :XOR
  A :MSTORE(SP + 829)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 833)
  B :MSTORE(SP + 827)
  $ => E :MLOAD(SP + 827)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 828)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 827)
  $ => E :SUB
  $ => A :MLOAD(SP + 833)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 828)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 829)
  $ => B :XOR
  $ => A :MLOAD(SP + 832)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  770255983n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 840)
  $ => A :ADD
  B :MSTORE(SP + 827)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 826)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 826)
  B :MSTORE(SP + 824)
  $ => E :MLOAD(SP + 824)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 825)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 824)
  $ => E :SUB
  $ => A :MLOAD(SP + 826)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 825)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 825)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 826)
  B :MSTORE(SP + 823)
  $ => E :MLOAD(SP + 823)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 824)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 823)
  $ => E :SUB
  $ => A :MLOAD(SP + 826)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 824)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 825)
  $ => A :XOR
  A :MSTORE(SP + 823)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 826)
  B :MSTORE(SP + 821)
  $ => E :MLOAD(SP + 821)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 822)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 821)
  $ => E :SUB
  $ => A :MLOAD(SP + 826)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 822)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 823)
  $ => A :XOR
  $ => B :MLOAD(SP + 864)
  A => D
  $ => A :MLOAD(SP + 845)
  $ => C :XOR
  $ => A :MLOAD(SP + 826)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 845)
  B => E
  $ => B :MLOAD(SP + 864)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 821)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1073)
  B :MSTORE(SP + 819)
  $ => E :MLOAD(SP + 819)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 820)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 819)
  $ => E :SUB
  $ => A :MLOAD(SP + 1073)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 820)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 820)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1073)
  B :MSTORE(SP + 818)
  $ => E :MLOAD(SP + 818)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 819)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 818)
  $ => E :SUB
  $ => A :MLOAD(SP + 1073)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 819)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 820)
  $ => A :XOR
  A :MSTORE(SP + 818)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1073)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 818)
  $ => A :XOR
  $ => B :MLOAD(SP + 1089)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 945)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 818)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 853)
  B :MSTORE(SP + 816)
  $ => E :MLOAD(SP + 816)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 817)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 816)
  $ => E :SUB
  $ => A :MLOAD(SP + 853)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 817)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 817)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 853)
  B :MSTORE(SP + 815)
  $ => E :MLOAD(SP + 815)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 816)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 815)
  $ => E :SUB
  $ => A :MLOAD(SP + 853)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 816)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 817)
  $ => A :XOR
  A :MSTORE(SP + 815)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 853)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 815)
  $ => B :XOR
  $ => A :MLOAD(SP + 818)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 871)
  A :MSTORE(SP + 815)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 902)
  A => D
  $ => A :MLOAD(SP + 827)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 814)
  $ => B :MLOAD(SP + 852)
  $ => A :MLOAD(SP + 833)
  $ => C :XOR
  $ => A :MLOAD(SP + 814)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 852)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 813)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 814)
  B :MSTORE(SP + 811)
  $ => E :MLOAD(SP + 811)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 812)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 811)
  $ => E :SUB
  $ => A :MLOAD(SP + 814)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 812)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 812)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 814)
  B :MSTORE(SP + 810)
  $ => E :MLOAD(SP + 810)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 811)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 810)
  $ => E :SUB
  $ => A :MLOAD(SP + 814)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 811)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 812)
  $ => A :XOR
  A :MSTORE(SP + 810)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 814)
  B :MSTORE(SP + 808)
  $ => E :MLOAD(SP + 808)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 809)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 808)
  $ => E :SUB
  $ => A :MLOAD(SP + 814)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 809)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 810)
  $ => B :XOR
  $ => A :MLOAD(SP + 813)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  1249150122n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 821)
  $ => A :ADD
  B :MSTORE(SP + 808)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 807)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 807)
  B :MSTORE(SP + 805)
  $ => E :MLOAD(SP + 805)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 806)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 805)
  $ => E :SUB
  $ => A :MLOAD(SP + 807)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 806)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 806)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 807)
  B :MSTORE(SP + 804)
  $ => E :MLOAD(SP + 804)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 805)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 804)
  $ => E :SUB
  $ => A :MLOAD(SP + 807)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 805)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 806)
  $ => A :XOR
  A :MSTORE(SP + 804)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 807)
  B :MSTORE(SP + 802)
  $ => E :MLOAD(SP + 802)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 803)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 802)
  $ => E :SUB
  $ => A :MLOAD(SP + 807)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 803)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 804)
  $ => A :XOR
  $ => B :MLOAD(SP + 845)
  A => D
  $ => A :MLOAD(SP + 826)
  $ => C :XOR
  $ => A :MLOAD(SP + 807)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 826)
  B => E
  $ => B :MLOAD(SP + 845)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 802)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1057)
  B :MSTORE(SP + 800)
  $ => E :MLOAD(SP + 800)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 801)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 800)
  $ => E :SUB
  $ => A :MLOAD(SP + 1057)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 801)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 801)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1057)
  B :MSTORE(SP + 799)
  $ => E :MLOAD(SP + 799)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 800)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 799)
  $ => E :SUB
  $ => A :MLOAD(SP + 1057)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 800)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 801)
  $ => A :XOR
  A :MSTORE(SP + 799)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1057)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 799)
  $ => A :XOR
  $ => B :MLOAD(SP + 1073)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 929)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 799)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 834)
  B :MSTORE(SP + 797)
  $ => E :MLOAD(SP + 797)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 798)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 797)
  $ => E :SUB
  $ => A :MLOAD(SP + 834)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 798)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 798)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 834)
  B :MSTORE(SP + 796)
  $ => E :MLOAD(SP + 796)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 797)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 796)
  $ => E :SUB
  $ => A :MLOAD(SP + 834)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 797)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 798)
  $ => A :XOR
  A :MSTORE(SP + 796)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 834)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 796)
  $ => B :XOR
  $ => A :MLOAD(SP + 799)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 852)
  A :MSTORE(SP + 796)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 883)
  A => D
  $ => A :MLOAD(SP + 808)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 795)
  $ => B :MLOAD(SP + 833)
  $ => A :MLOAD(SP + 814)
  $ => C :XOR
  $ => A :MLOAD(SP + 795)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 833)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 794)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 795)
  B :MSTORE(SP + 792)
  $ => E :MLOAD(SP + 792)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 793)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 792)
  $ => E :SUB
  $ => A :MLOAD(SP + 795)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 793)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 793)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 795)
  B :MSTORE(SP + 791)
  $ => E :MLOAD(SP + 791)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 792)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 791)
  $ => E :SUB
  $ => A :MLOAD(SP + 795)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 792)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 793)
  $ => A :XOR
  A :MSTORE(SP + 791)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 795)
  B :MSTORE(SP + 789)
  $ => E :MLOAD(SP + 789)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 790)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 789)
  $ => E :SUB
  $ => A :MLOAD(SP + 795)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 790)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 791)
  $ => B :XOR
  $ => A :MLOAD(SP + 794)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  1555081692n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 802)
  $ => A :ADD
  B :MSTORE(SP + 789)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 788)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 788)
  B :MSTORE(SP + 786)
  $ => E :MLOAD(SP + 786)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 787)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 786)
  $ => E :SUB
  $ => A :MLOAD(SP + 788)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 787)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 787)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 788)
  B :MSTORE(SP + 785)
  $ => E :MLOAD(SP + 785)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 786)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 785)
  $ => E :SUB
  $ => A :MLOAD(SP + 788)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 786)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 787)
  $ => A :XOR
  A :MSTORE(SP + 785)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 788)
  B :MSTORE(SP + 783)
  $ => E :MLOAD(SP + 783)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 784)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 783)
  $ => E :SUB
  $ => A :MLOAD(SP + 788)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 784)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 785)
  $ => A :XOR
  $ => B :MLOAD(SP + 826)
  A => E
  $ => A :MLOAD(SP + 807)
  $ => C :XOR
  $ => A :MLOAD(SP + 788)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 807)
  B => D
  $ => B :MLOAD(SP + 826)
  $ => C :AND
  D => A
  C => B
  $ => B :XOR
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 783)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1041)
  B :MSTORE(SP + 781)
  $ => E :MLOAD(SP + 781)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 782)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 781)
  $ => E :SUB
  $ => A :MLOAD(SP + 1041)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 782)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 782)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1041)
  B :MSTORE(SP + 780)
  $ => E :MLOAD(SP + 780)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 781)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 780)
  $ => E :SUB
  $ => A :MLOAD(SP + 1041)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 781)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 782)
  $ => A :XOR
  A :MSTORE(SP + 780)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1041)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 780)
  $ => A :XOR
  $ => B :MLOAD(SP + 1057)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 910)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 780)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 815)
  B :MSTORE(SP + 778)
  $ => E :MLOAD(SP + 778)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 779)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 778)
  $ => E :SUB
  $ => A :MLOAD(SP + 815)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 779)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 779)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 815)
  B :MSTORE(SP + 777)
  $ => E :MLOAD(SP + 777)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 778)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 777)
  $ => E :SUB
  $ => A :MLOAD(SP + 815)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 778)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 779)
  $ => A :XOR
  A :MSTORE(SP + 777)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 815)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 777)
  $ => B :XOR
  $ => A :MLOAD(SP + 780)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 833)
  A :MSTORE(SP + 777)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 864)
  A => D
  $ => A :MLOAD(SP + 789)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 776)
  $ => B :MLOAD(SP + 814)
  $ => A :MLOAD(SP + 795)
  $ => C :XOR
  $ => A :MLOAD(SP + 776)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 814)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 775)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 776)
  B :MSTORE(SP + 773)
  $ => E :MLOAD(SP + 773)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 774)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 773)
  $ => E :SUB
  $ => A :MLOAD(SP + 776)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 774)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 774)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 776)
  B :MSTORE(SP + 772)
  $ => E :MLOAD(SP + 772)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 773)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 772)
  $ => E :SUB
  $ => A :MLOAD(SP + 776)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 773)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 774)
  $ => A :XOR
  A :MSTORE(SP + 772)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 776)
  B :MSTORE(SP + 770)
  $ => E :MLOAD(SP + 770)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 771)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 770)
  $ => E :SUB
  $ => A :MLOAD(SP + 776)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 771)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 772)
  $ => B :XOR
  $ => A :MLOAD(SP + 775)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  1996064986n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 783)
  $ => A :ADD
  B :MSTORE(SP + 770)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 769)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 769)
  B :MSTORE(SP + 767)
  $ => E :MLOAD(SP + 767)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 768)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 767)
  $ => E :SUB
  $ => A :MLOAD(SP + 769)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 768)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 768)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 769)
  B :MSTORE(SP + 766)
  $ => E :MLOAD(SP + 766)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 767)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 766)
  $ => E :SUB
  $ => A :MLOAD(SP + 769)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 767)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 768)
  $ => A :XOR
  A :MSTORE(SP + 766)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 769)
  B :MSTORE(SP + 764)
  $ => E :MLOAD(SP + 764)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 765)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 764)
  $ => E :SUB
  $ => A :MLOAD(SP + 769)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 765)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 766)
  $ => A :XOR
  $ => B :MLOAD(SP + 807)
  A => D
  $ => A :MLOAD(SP + 788)
  $ => C :XOR
  $ => A :MLOAD(SP + 769)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 788)
  B => E
  $ => B :MLOAD(SP + 807)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 764)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1025)
  B :MSTORE(SP + 762)
  $ => E :MLOAD(SP + 762)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 763)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 762)
  $ => E :SUB
  $ => A :MLOAD(SP + 1025)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 763)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 763)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1025)
  B :MSTORE(SP + 761)
  $ => E :MLOAD(SP + 761)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 762)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 761)
  $ => E :SUB
  $ => A :MLOAD(SP + 1025)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 762)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 763)
  $ => A :XOR
  A :MSTORE(SP + 761)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1025)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 761)
  $ => A :XOR
  $ => B :MLOAD(SP + 1041)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 891)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 761)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 796)
  B :MSTORE(SP + 759)
  $ => E :MLOAD(SP + 759)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 760)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 759)
  $ => E :SUB
  $ => A :MLOAD(SP + 796)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 760)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 760)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 796)
  B :MSTORE(SP + 758)
  $ => E :MLOAD(SP + 758)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 759)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 758)
  $ => E :SUB
  $ => A :MLOAD(SP + 796)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 759)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 760)
  $ => A :XOR
  A :MSTORE(SP + 758)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 796)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 758)
  $ => B :XOR
  $ => A :MLOAD(SP + 761)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 814)
  A :MSTORE(SP + 758)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 845)
  A => D
  $ => A :MLOAD(SP + 770)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 757)
  $ => B :MLOAD(SP + 795)
  $ => A :MLOAD(SP + 776)
  $ => C :XOR
  $ => A :MLOAD(SP + 757)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 795)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 756)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 757)
  B :MSTORE(SP + 754)
  $ => E :MLOAD(SP + 754)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 755)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 754)
  $ => E :SUB
  $ => A :MLOAD(SP + 757)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 755)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 755)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 757)
  B :MSTORE(SP + 753)
  $ => E :MLOAD(SP + 753)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 754)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 753)
  $ => E :SUB
  $ => A :MLOAD(SP + 757)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 754)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 755)
  $ => A :XOR
  A :MSTORE(SP + 753)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 757)
  B :MSTORE(SP + 751)
  $ => E :MLOAD(SP + 751)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 752)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 751)
  $ => E :SUB
  $ => A :MLOAD(SP + 757)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 752)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 753)
  $ => B :XOR
  $ => A :MLOAD(SP + 756)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  2554220882n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 764)
  $ => A :ADD
  B :MSTORE(SP + 751)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 750)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 750)
  B :MSTORE(SP + 748)
  $ => E :MLOAD(SP + 748)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 749)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 748)
  $ => E :SUB
  $ => A :MLOAD(SP + 750)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 749)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 749)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 750)
  B :MSTORE(SP + 747)
  $ => E :MLOAD(SP + 747)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 748)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 747)
  $ => E :SUB
  $ => A :MLOAD(SP + 750)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 748)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 749)
  $ => A :XOR
  A :MSTORE(SP + 747)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 750)
  B :MSTORE(SP + 745)
  $ => E :MLOAD(SP + 745)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 746)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 745)
  $ => E :SUB
  $ => A :MLOAD(SP + 750)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 746)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 747)
  $ => A :XOR
  $ => B :MLOAD(SP + 788)
  A => D
  $ => A :MLOAD(SP + 769)
  $ => C :XOR
  $ => A :MLOAD(SP + 750)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 769)
  B => E
  $ => B :MLOAD(SP + 788)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 745)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1009)
  B :MSTORE(SP + 743)
  $ => E :MLOAD(SP + 743)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 744)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 743)
  $ => E :SUB
  $ => A :MLOAD(SP + 1009)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 744)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 744)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1009)
  B :MSTORE(SP + 742)
  $ => E :MLOAD(SP + 742)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 743)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 742)
  $ => E :SUB
  $ => A :MLOAD(SP + 1009)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 743)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 744)
  $ => A :XOR
  A :MSTORE(SP + 742)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1009)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 742)
  $ => A :XOR
  $ => B :MLOAD(SP + 1025)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 872)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 742)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 777)
  B :MSTORE(SP + 740)
  $ => E :MLOAD(SP + 740)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 741)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 740)
  $ => E :SUB
  $ => A :MLOAD(SP + 777)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 741)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 741)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 777)
  B :MSTORE(SP + 739)
  $ => E :MLOAD(SP + 739)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 740)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 739)
  $ => E :SUB
  $ => A :MLOAD(SP + 777)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 740)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 741)
  $ => A :XOR
  A :MSTORE(SP + 739)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 777)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 739)
  $ => B :XOR
  $ => A :MLOAD(SP + 742)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 795)
  A :MSTORE(SP + 739)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 826)
  A => E
  $ => A :MLOAD(SP + 751)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 738)
  $ => B :MLOAD(SP + 776)
  $ => A :MLOAD(SP + 757)
  $ => C :XOR
  $ => A :MLOAD(SP + 738)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 776)
  $ => C :XOR
  E => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 737)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 738)
  B :MSTORE(SP + 735)
  $ => E :MLOAD(SP + 735)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 736)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 735)
  $ => E :SUB
  $ => A :MLOAD(SP + 738)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 736)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 736)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 738)
  B :MSTORE(SP + 734)
  $ => E :MLOAD(SP + 734)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 735)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 734)
  $ => E :SUB
  $ => A :MLOAD(SP + 738)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 735)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 736)
  $ => A :XOR
  A :MSTORE(SP + 734)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 738)
  B :MSTORE(SP + 732)
  $ => E :MLOAD(SP + 732)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 733)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 732)
  $ => E :SUB
  $ => A :MLOAD(SP + 738)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 733)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 734)
  $ => B :XOR
  $ => A :MLOAD(SP + 737)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  2821834349n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 745)
  $ => A :ADD
  B :MSTORE(SP + 732)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 731)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 731)
  B :MSTORE(SP + 729)
  $ => E :MLOAD(SP + 729)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 730)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 729)
  $ => E :SUB
  $ => A :MLOAD(SP + 731)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 730)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 730)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 731)
  B :MSTORE(SP + 728)
  $ => E :MLOAD(SP + 728)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 729)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 728)
  $ => E :SUB
  $ => A :MLOAD(SP + 731)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 729)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 730)
  $ => A :XOR
  A :MSTORE(SP + 728)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 731)
  B :MSTORE(SP + 726)
  $ => E :MLOAD(SP + 726)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 727)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 726)
  $ => E :SUB
  $ => A :MLOAD(SP + 731)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 727)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 728)
  $ => A :XOR
  $ => B :MLOAD(SP + 769)
  A => D
  $ => A :MLOAD(SP + 750)
  $ => C :XOR
  $ => A :MLOAD(SP + 731)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 750)
  B => E
  $ => B :MLOAD(SP + 769)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 726)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 993)
  B :MSTORE(SP + 724)
  $ => E :MLOAD(SP + 724)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 725)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 724)
  $ => E :SUB
  $ => A :MLOAD(SP + 993)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 725)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 725)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 993)
  B :MSTORE(SP + 723)
  $ => E :MLOAD(SP + 723)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 724)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 723)
  $ => E :SUB
  $ => A :MLOAD(SP + 993)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 724)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 725)
  $ => A :XOR
  A :MSTORE(SP + 723)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 993)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 723)
  $ => A :XOR
  $ => B :MLOAD(SP + 1009)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 853)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 723)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 758)
  B :MSTORE(SP + 721)
  $ => E :MLOAD(SP + 721)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 722)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 721)
  $ => E :SUB
  $ => A :MLOAD(SP + 758)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 722)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 722)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 758)
  B :MSTORE(SP + 720)
  $ => E :MLOAD(SP + 720)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 721)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 720)
  $ => E :SUB
  $ => A :MLOAD(SP + 758)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 721)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 722)
  $ => A :XOR
  A :MSTORE(SP + 720)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 758)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 720)
  $ => B :XOR
  $ => A :MLOAD(SP + 723)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 776)
  A :MSTORE(SP + 720)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 807)
  A => D
  $ => A :MLOAD(SP + 732)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 719)
  $ => B :MLOAD(SP + 757)
  $ => A :MLOAD(SP + 738)
  $ => C :XOR
  $ => A :MLOAD(SP + 719)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 757)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 718)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 719)
  B :MSTORE(SP + 716)
  $ => E :MLOAD(SP + 716)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 717)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 716)
  $ => E :SUB
  $ => A :MLOAD(SP + 719)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 717)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 717)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 719)
  B :MSTORE(SP + 715)
  $ => E :MLOAD(SP + 715)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 716)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 715)
  $ => E :SUB
  $ => A :MLOAD(SP + 719)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 716)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 717)
  $ => A :XOR
  A :MSTORE(SP + 715)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 719)
  B :MSTORE(SP + 713)
  $ => E :MLOAD(SP + 713)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 714)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 713)
  $ => E :SUB
  $ => A :MLOAD(SP + 719)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 714)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 715)
  $ => B :XOR
  $ => A :MLOAD(SP + 718)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  2952996808n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 726)
  $ => A :ADD
  B :MSTORE(SP + 713)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 712)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 712)
  B :MSTORE(SP + 710)
  $ => E :MLOAD(SP + 710)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 711)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 710)
  $ => E :SUB
  $ => A :MLOAD(SP + 712)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 711)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 711)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 712)
  B :MSTORE(SP + 709)
  $ => E :MLOAD(SP + 709)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 710)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 709)
  $ => E :SUB
  $ => A :MLOAD(SP + 712)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 710)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 711)
  $ => A :XOR
  A :MSTORE(SP + 709)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 712)
  B :MSTORE(SP + 707)
  $ => E :MLOAD(SP + 707)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 708)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 707)
  $ => E :SUB
  $ => A :MLOAD(SP + 712)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 708)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 709)
  $ => A :XOR
  $ => B :MLOAD(SP + 750)
  A => D
  $ => A :MLOAD(SP + 731)
  $ => C :XOR
  $ => A :MLOAD(SP + 712)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 731)
  B => E
  $ => B :MLOAD(SP + 750)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 707)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 977)
  B :MSTORE(SP + 705)
  $ => E :MLOAD(SP + 705)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 706)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 705)
  $ => E :SUB
  $ => A :MLOAD(SP + 977)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 706)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 706)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 977)
  B :MSTORE(SP + 704)
  $ => E :MLOAD(SP + 704)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 705)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 704)
  $ => E :SUB
  $ => A :MLOAD(SP + 977)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 705)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 706)
  $ => A :XOR
  A :MSTORE(SP + 704)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 977)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 704)
  $ => A :XOR
  $ => B :MLOAD(SP + 993)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 834)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 704)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 739)
  B :MSTORE(SP + 702)
  $ => E :MLOAD(SP + 702)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 703)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 702)
  $ => E :SUB
  $ => A :MLOAD(SP + 739)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 703)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 703)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 739)
  B :MSTORE(SP + 701)
  $ => E :MLOAD(SP + 701)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 702)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 701)
  $ => E :SUB
  $ => A :MLOAD(SP + 739)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 702)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 703)
  $ => A :XOR
  A :MSTORE(SP + 701)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 739)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 701)
  $ => B :XOR
  $ => A :MLOAD(SP + 704)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 757)
  A :MSTORE(SP + 701)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 788)
  A => D
  $ => A :MLOAD(SP + 713)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 700)
  $ => B :MLOAD(SP + 738)
  $ => A :MLOAD(SP + 719)
  $ => C :XOR
  $ => A :MLOAD(SP + 700)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 738)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 699)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 700)
  B :MSTORE(SP + 697)
  $ => E :MLOAD(SP + 697)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 698)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 697)
  $ => E :SUB
  $ => A :MLOAD(SP + 700)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 698)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 698)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 700)
  B :MSTORE(SP + 696)
  $ => E :MLOAD(SP + 696)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 697)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 696)
  $ => E :SUB
  $ => A :MLOAD(SP + 700)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 697)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 698)
  $ => A :XOR
  A :MSTORE(SP + 696)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 700)
  B :MSTORE(SP + 694)
  $ => E :MLOAD(SP + 694)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 695)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 694)
  $ => E :SUB
  $ => A :MLOAD(SP + 700)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 695)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 696)
  $ => B :XOR
  $ => A :MLOAD(SP + 699)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  3210313671n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 707)
  $ => A :ADD
  B :MSTORE(SP + 694)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 693)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 693)
  B :MSTORE(SP + 691)
  $ => E :MLOAD(SP + 691)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 692)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 691)
  $ => E :SUB
  $ => A :MLOAD(SP + 693)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 692)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 692)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 693)
  B :MSTORE(SP + 690)
  $ => E :MLOAD(SP + 690)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 691)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 690)
  $ => E :SUB
  $ => A :MLOAD(SP + 693)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 691)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 692)
  $ => A :XOR
  A :MSTORE(SP + 690)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 693)
  B :MSTORE(SP + 688)
  $ => E :MLOAD(SP + 688)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 689)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 688)
  $ => E :SUB
  $ => A :MLOAD(SP + 693)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 689)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 690)
  $ => A :XOR
  $ => B :MLOAD(SP + 731)
  A => E
  $ => A :MLOAD(SP + 712)
  $ => C :XOR
  $ => A :MLOAD(SP + 693)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 712)
  B => D
  $ => B :MLOAD(SP + 731)
  $ => C :AND
  D => A
  C => B
  $ => B :XOR
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 688)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 961)
  B :MSTORE(SP + 686)
  $ => E :MLOAD(SP + 686)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 687)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 686)
  $ => E :SUB
  $ => A :MLOAD(SP + 961)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 687)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 687)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 961)
  B :MSTORE(SP + 685)
  $ => E :MLOAD(SP + 685)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 686)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 685)
  $ => E :SUB
  $ => A :MLOAD(SP + 961)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 686)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 687)
  $ => A :XOR
  A :MSTORE(SP + 685)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 961)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 685)
  $ => A :XOR
  $ => B :MLOAD(SP + 977)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 815)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 685)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 720)
  B :MSTORE(SP + 683)
  $ => E :MLOAD(SP + 683)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 684)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 683)
  $ => E :SUB
  $ => A :MLOAD(SP + 720)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 684)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 684)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 720)
  B :MSTORE(SP + 682)
  $ => E :MLOAD(SP + 682)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 683)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 682)
  $ => E :SUB
  $ => A :MLOAD(SP + 720)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 683)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 684)
  $ => A :XOR
  A :MSTORE(SP + 682)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 720)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 682)
  $ => B :XOR
  $ => A :MLOAD(SP + 685)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 738)
  A :MSTORE(SP + 682)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 769)
  A => D
  $ => A :MLOAD(SP + 694)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 681)
  $ => B :MLOAD(SP + 719)
  $ => A :MLOAD(SP + 700)
  $ => C :XOR
  $ => A :MLOAD(SP + 681)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 719)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 680)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 681)
  B :MSTORE(SP + 678)
  $ => E :MLOAD(SP + 678)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 679)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 678)
  $ => E :SUB
  $ => A :MLOAD(SP + 681)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 679)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 679)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 681)
  B :MSTORE(SP + 677)
  $ => E :MLOAD(SP + 677)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 678)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 677)
  $ => E :SUB
  $ => A :MLOAD(SP + 681)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 678)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 679)
  $ => A :XOR
  A :MSTORE(SP + 677)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 681)
  B :MSTORE(SP + 675)
  $ => E :MLOAD(SP + 675)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 676)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 675)
  $ => E :SUB
  $ => A :MLOAD(SP + 681)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 676)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 677)
  $ => B :XOR
  $ => A :MLOAD(SP + 680)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  3336571891n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 688)
  $ => A :ADD
  B :MSTORE(SP + 675)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 674)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 674)
  B :MSTORE(SP + 672)
  $ => E :MLOAD(SP + 672)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 673)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 672)
  $ => E :SUB
  $ => A :MLOAD(SP + 674)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 673)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 673)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 674)
  B :MSTORE(SP + 671)
  $ => E :MLOAD(SP + 671)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 672)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 671)
  $ => E :SUB
  $ => A :MLOAD(SP + 674)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 672)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 673)
  $ => A :XOR
  A :MSTORE(SP + 671)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 674)
  B :MSTORE(SP + 669)
  $ => E :MLOAD(SP + 669)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 670)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 669)
  $ => E :SUB
  $ => A :MLOAD(SP + 674)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 670)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 671)
  $ => A :XOR
  $ => B :MLOAD(SP + 712)
  A => D
  $ => A :MLOAD(SP + 693)
  $ => C :XOR
  $ => A :MLOAD(SP + 674)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 693)
  B => E
  $ => B :MLOAD(SP + 712)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 669)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 945)
  B :MSTORE(SP + 667)
  $ => E :MLOAD(SP + 667)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 668)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 667)
  $ => E :SUB
  $ => A :MLOAD(SP + 945)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 668)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 668)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 945)
  B :MSTORE(SP + 666)
  $ => E :MLOAD(SP + 666)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 667)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 666)
  $ => E :SUB
  $ => A :MLOAD(SP + 945)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 667)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 668)
  $ => A :XOR
  A :MSTORE(SP + 666)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 945)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 666)
  $ => A :XOR
  $ => B :MLOAD(SP + 961)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 796)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 666)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 701)
  B :MSTORE(SP + 664)
  $ => E :MLOAD(SP + 664)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 665)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 664)
  $ => E :SUB
  $ => A :MLOAD(SP + 701)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 665)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 665)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 701)
  B :MSTORE(SP + 663)
  $ => E :MLOAD(SP + 663)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 664)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 663)
  $ => E :SUB
  $ => A :MLOAD(SP + 701)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 664)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 665)
  $ => A :XOR
  A :MSTORE(SP + 663)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 701)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 663)
  $ => B :XOR
  $ => A :MLOAD(SP + 666)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 719)
  A :MSTORE(SP + 663)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 750)
  A => D
  $ => A :MLOAD(SP + 675)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 662)
  $ => B :MLOAD(SP + 700)
  $ => A :MLOAD(SP + 681)
  $ => C :XOR
  $ => A :MLOAD(SP + 662)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 700)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 661)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 662)
  B :MSTORE(SP + 659)
  $ => E :MLOAD(SP + 659)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 660)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 659)
  $ => E :SUB
  $ => A :MLOAD(SP + 662)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 660)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 660)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 662)
  B :MSTORE(SP + 658)
  $ => E :MLOAD(SP + 658)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 659)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 658)
  $ => E :SUB
  $ => A :MLOAD(SP + 662)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 659)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 660)
  $ => A :XOR
  A :MSTORE(SP + 658)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 662)
  B :MSTORE(SP + 656)
  $ => E :MLOAD(SP + 656)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 657)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 656)
  $ => E :SUB
  $ => A :MLOAD(SP + 662)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 657)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 658)
  $ => B :XOR
  $ => A :MLOAD(SP + 661)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  3584528711n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 669)
  $ => A :ADD
  B :MSTORE(SP + 656)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 655)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 655)
  B :MSTORE(SP + 653)
  $ => E :MLOAD(SP + 653)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 654)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 653)
  $ => E :SUB
  $ => A :MLOAD(SP + 655)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 654)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 654)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 655)
  B :MSTORE(SP + 652)
  $ => E :MLOAD(SP + 652)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 653)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 652)
  $ => E :SUB
  $ => A :MLOAD(SP + 655)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 653)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 654)
  $ => A :XOR
  A :MSTORE(SP + 652)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 655)
  B :MSTORE(SP + 650)
  $ => E :MLOAD(SP + 650)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 651)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 650)
  $ => E :SUB
  $ => A :MLOAD(SP + 655)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 651)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 652)
  $ => A :XOR
  $ => B :MLOAD(SP + 693)
  A => D
  $ => A :MLOAD(SP + 674)
  $ => C :XOR
  $ => A :MLOAD(SP + 655)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 674)
  B => E
  $ => B :MLOAD(SP + 693)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 650)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 929)
  B :MSTORE(SP + 648)
  $ => E :MLOAD(SP + 648)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 649)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 648)
  $ => E :SUB
  $ => A :MLOAD(SP + 929)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 649)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 649)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 929)
  B :MSTORE(SP + 647)
  $ => E :MLOAD(SP + 647)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 648)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 647)
  $ => E :SUB
  $ => A :MLOAD(SP + 929)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 648)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 649)
  $ => A :XOR
  A :MSTORE(SP + 647)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 929)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 647)
  $ => A :XOR
  $ => B :MLOAD(SP + 945)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 777)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 647)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 682)
  B :MSTORE(SP + 645)
  $ => E :MLOAD(SP + 645)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 646)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 645)
  $ => E :SUB
  $ => A :MLOAD(SP + 682)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 646)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 646)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 682)
  B :MSTORE(SP + 644)
  $ => E :MLOAD(SP + 644)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 645)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 644)
  $ => E :SUB
  $ => A :MLOAD(SP + 682)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 645)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 646)
  $ => A :XOR
  A :MSTORE(SP + 644)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 682)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 644)
  $ => B :XOR
  $ => A :MLOAD(SP + 647)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 700)
  A :MSTORE(SP + 644)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 731)
  A => E
  $ => A :MLOAD(SP + 656)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 643)
  $ => B :MLOAD(SP + 681)
  $ => A :MLOAD(SP + 662)
  $ => C :XOR
  $ => A :MLOAD(SP + 643)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 681)
  $ => C :XOR
  E => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 642)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 643)
  B :MSTORE(SP + 640)
  $ => E :MLOAD(SP + 640)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 641)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 640)
  $ => E :SUB
  $ => A :MLOAD(SP + 643)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 641)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 641)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 643)
  B :MSTORE(SP + 639)
  $ => E :MLOAD(SP + 639)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 640)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 639)
  $ => E :SUB
  $ => A :MLOAD(SP + 643)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 640)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 641)
  $ => A :XOR
  A :MSTORE(SP + 639)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 643)
  B :MSTORE(SP + 637)
  $ => E :MLOAD(SP + 637)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 638)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 637)
  $ => E :SUB
  $ => A :MLOAD(SP + 643)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 638)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 639)
  $ => B :XOR
  $ => A :MLOAD(SP + 642)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  113926993n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 650)
  $ => A :ADD
  B :MSTORE(SP + 637)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 636)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 636)
  B :MSTORE(SP + 634)
  $ => E :MLOAD(SP + 634)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 635)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 634)
  $ => E :SUB
  $ => A :MLOAD(SP + 636)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 635)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 635)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 636)
  B :MSTORE(SP + 633)
  $ => E :MLOAD(SP + 633)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 634)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 633)
  $ => E :SUB
  $ => A :MLOAD(SP + 636)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 634)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 635)
  $ => A :XOR
  A :MSTORE(SP + 633)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 636)
  B :MSTORE(SP + 631)
  $ => E :MLOAD(SP + 631)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 632)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 631)
  $ => E :SUB
  $ => A :MLOAD(SP + 636)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 632)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 633)
  $ => A :XOR
  $ => B :MLOAD(SP + 674)
  A => D
  $ => A :MLOAD(SP + 655)
  $ => C :XOR
  $ => A :MLOAD(SP + 636)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 655)
  B => E
  $ => B :MLOAD(SP + 674)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 631)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 910)
  B :MSTORE(SP + 629)
  $ => E :MLOAD(SP + 629)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 630)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 629)
  $ => E :SUB
  $ => A :MLOAD(SP + 910)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 630)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 630)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 910)
  B :MSTORE(SP + 628)
  $ => E :MLOAD(SP + 628)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 629)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 628)
  $ => E :SUB
  $ => A :MLOAD(SP + 910)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 629)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 630)
  $ => A :XOR
  A :MSTORE(SP + 628)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 910)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 628)
  $ => A :XOR
  $ => B :MLOAD(SP + 929)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 758)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 628)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 663)
  B :MSTORE(SP + 626)
  $ => E :MLOAD(SP + 626)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 627)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 626)
  $ => E :SUB
  $ => A :MLOAD(SP + 663)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 627)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 627)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 663)
  B :MSTORE(SP + 625)
  $ => E :MLOAD(SP + 625)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 626)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 625)
  $ => E :SUB
  $ => A :MLOAD(SP + 663)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 626)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 627)
  $ => A :XOR
  A :MSTORE(SP + 625)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 663)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 625)
  $ => B :XOR
  $ => A :MLOAD(SP + 628)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 681)
  A :MSTORE(SP + 625)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 712)
  A => D
  $ => A :MLOAD(SP + 637)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 624)
  $ => B :MLOAD(SP + 662)
  $ => A :MLOAD(SP + 643)
  $ => C :XOR
  $ => A :MLOAD(SP + 624)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 662)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 623)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 624)
  B :MSTORE(SP + 621)
  $ => E :MLOAD(SP + 621)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 622)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 621)
  $ => E :SUB
  $ => A :MLOAD(SP + 624)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 622)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 622)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 624)
  B :MSTORE(SP + 620)
  $ => E :MLOAD(SP + 620)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 621)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 620)
  $ => E :SUB
  $ => A :MLOAD(SP + 624)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 621)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 622)
  $ => A :XOR
  A :MSTORE(SP + 620)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 624)
  B :MSTORE(SP + 618)
  $ => E :MLOAD(SP + 618)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 619)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 618)
  $ => E :SUB
  $ => A :MLOAD(SP + 624)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 619)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 620)
  $ => B :XOR
  $ => A :MLOAD(SP + 623)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  338241895n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 631)
  $ => A :ADD
  B :MSTORE(SP + 618)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 617)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 617)
  B :MSTORE(SP + 615)
  $ => E :MLOAD(SP + 615)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 616)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 615)
  $ => E :SUB
  $ => A :MLOAD(SP + 617)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 616)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 616)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 617)
  B :MSTORE(SP + 614)
  $ => E :MLOAD(SP + 614)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 615)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 614)
  $ => E :SUB
  $ => A :MLOAD(SP + 617)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 615)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 616)
  $ => A :XOR
  A :MSTORE(SP + 614)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 617)
  B :MSTORE(SP + 612)
  $ => E :MLOAD(SP + 612)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 613)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 612)
  $ => E :SUB
  $ => A :MLOAD(SP + 617)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 613)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 614)
  $ => A :XOR
  $ => B :MLOAD(SP + 655)
  A => D
  $ => A :MLOAD(SP + 636)
  $ => C :XOR
  $ => A :MLOAD(SP + 617)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 636)
  B => E
  $ => B :MLOAD(SP + 655)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 612)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 891)
  B :MSTORE(SP + 610)
  $ => E :MLOAD(SP + 610)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 611)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 610)
  $ => E :SUB
  $ => A :MLOAD(SP + 891)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 611)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 611)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 891)
  B :MSTORE(SP + 609)
  $ => E :MLOAD(SP + 609)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 610)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 609)
  $ => E :SUB
  $ => A :MLOAD(SP + 891)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 610)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 611)
  $ => A :XOR
  A :MSTORE(SP + 609)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 891)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 609)
  $ => A :XOR
  $ => B :MLOAD(SP + 910)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 739)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 609)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 644)
  B :MSTORE(SP + 607)
  $ => E :MLOAD(SP + 607)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 608)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 607)
  $ => E :SUB
  $ => A :MLOAD(SP + 644)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 608)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 608)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 644)
  B :MSTORE(SP + 606)
  $ => E :MLOAD(SP + 606)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 607)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 606)
  $ => E :SUB
  $ => A :MLOAD(SP + 644)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 607)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 608)
  $ => A :XOR
  A :MSTORE(SP + 606)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 644)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 606)
  $ => B :XOR
  $ => A :MLOAD(SP + 609)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 662)
  A :MSTORE(SP + 606)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 693)
  A => D
  $ => A :MLOAD(SP + 618)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 605)
  $ => B :MLOAD(SP + 643)
  $ => A :MLOAD(SP + 624)
  $ => C :XOR
  $ => A :MLOAD(SP + 605)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 643)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 604)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 605)
  B :MSTORE(SP + 602)
  $ => E :MLOAD(SP + 602)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 603)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 602)
  $ => E :SUB
  $ => A :MLOAD(SP + 605)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 603)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 603)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 605)
  B :MSTORE(SP + 601)
  $ => E :MLOAD(SP + 601)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 602)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 601)
  $ => E :SUB
  $ => A :MLOAD(SP + 605)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 602)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 603)
  $ => A :XOR
  A :MSTORE(SP + 601)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 605)
  B :MSTORE(SP + 599)
  $ => E :MLOAD(SP + 599)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 600)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 599)
  $ => E :SUB
  $ => A :MLOAD(SP + 605)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 600)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 601)
  $ => B :XOR
  $ => A :MLOAD(SP + 604)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  666307205n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 612)
  $ => A :ADD
  B :MSTORE(SP + 599)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 598)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 598)
  B :MSTORE(SP + 596)
  $ => E :MLOAD(SP + 596)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 597)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 596)
  $ => E :SUB
  $ => A :MLOAD(SP + 598)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 597)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 597)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 598)
  B :MSTORE(SP + 595)
  $ => E :MLOAD(SP + 595)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 596)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 595)
  $ => E :SUB
  $ => A :MLOAD(SP + 598)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 596)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 597)
  $ => A :XOR
  A :MSTORE(SP + 595)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 598)
  B :MSTORE(SP + 593)
  $ => E :MLOAD(SP + 593)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 594)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 593)
  $ => E :SUB
  $ => A :MLOAD(SP + 598)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 594)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 595)
  $ => A :XOR
  $ => B :MLOAD(SP + 636)
  A => E
  $ => A :MLOAD(SP + 617)
  $ => C :XOR
  $ => A :MLOAD(SP + 598)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 617)
  B => D
  $ => B :MLOAD(SP + 636)
  $ => C :AND
  D => A
  C => B
  $ => B :XOR
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 593)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 872)
  B :MSTORE(SP + 591)
  $ => E :MLOAD(SP + 591)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 592)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 591)
  $ => E :SUB
  $ => A :MLOAD(SP + 872)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 592)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 592)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 872)
  B :MSTORE(SP + 590)
  $ => E :MLOAD(SP + 590)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 591)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 590)
  $ => E :SUB
  $ => A :MLOAD(SP + 872)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 591)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 592)
  $ => A :XOR
  A :MSTORE(SP + 590)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 872)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 590)
  $ => A :XOR
  $ => B :MLOAD(SP + 891)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 720)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 590)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 625)
  B :MSTORE(SP + 588)
  $ => E :MLOAD(SP + 588)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 589)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 588)
  $ => E :SUB
  $ => A :MLOAD(SP + 625)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 589)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 589)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 625)
  B :MSTORE(SP + 587)
  $ => E :MLOAD(SP + 587)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 588)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 587)
  $ => E :SUB
  $ => A :MLOAD(SP + 625)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 588)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 589)
  $ => A :XOR
  A :MSTORE(SP + 587)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 625)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 587)
  $ => B :XOR
  $ => A :MLOAD(SP + 590)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 643)
  A :MSTORE(SP + 587)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 674)
  A => D
  $ => A :MLOAD(SP + 599)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 586)
  $ => B :MLOAD(SP + 624)
  $ => A :MLOAD(SP + 605)
  $ => C :XOR
  $ => A :MLOAD(SP + 586)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 624)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 585)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 586)
  B :MSTORE(SP + 583)
  $ => E :MLOAD(SP + 583)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 584)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 583)
  $ => E :SUB
  $ => A :MLOAD(SP + 586)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 584)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 584)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 586)
  B :MSTORE(SP + 582)
  $ => E :MLOAD(SP + 582)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 583)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 582)
  $ => E :SUB
  $ => A :MLOAD(SP + 586)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 583)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 584)
  $ => A :XOR
  A :MSTORE(SP + 582)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 586)
  B :MSTORE(SP + 580)
  $ => E :MLOAD(SP + 580)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 581)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 580)
  $ => E :SUB
  $ => A :MLOAD(SP + 586)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 581)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 582)
  $ => B :XOR
  $ => A :MLOAD(SP + 585)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  773529912n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 593)
  $ => A :ADD
  B :MSTORE(SP + 580)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 579)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 579)
  B :MSTORE(SP + 577)
  $ => E :MLOAD(SP + 577)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 578)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 577)
  $ => E :SUB
  $ => A :MLOAD(SP + 579)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 578)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 578)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 579)
  B :MSTORE(SP + 576)
  $ => E :MLOAD(SP + 576)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 577)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 576)
  $ => E :SUB
  $ => A :MLOAD(SP + 579)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 577)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 578)
  $ => A :XOR
  A :MSTORE(SP + 576)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 579)
  B :MSTORE(SP + 574)
  $ => E :MLOAD(SP + 574)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 575)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 574)
  $ => E :SUB
  $ => A :MLOAD(SP + 579)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 575)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 576)
  $ => A :XOR
  $ => B :MLOAD(SP + 617)
  A => D
  $ => A :MLOAD(SP + 598)
  $ => C :XOR
  $ => A :MLOAD(SP + 579)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 598)
  B => E
  $ => B :MLOAD(SP + 617)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 574)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 853)
  B :MSTORE(SP + 572)
  $ => E :MLOAD(SP + 572)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 573)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 572)
  $ => E :SUB
  $ => A :MLOAD(SP + 853)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 573)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 573)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 853)
  B :MSTORE(SP + 571)
  $ => E :MLOAD(SP + 571)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 572)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 571)
  $ => E :SUB
  $ => A :MLOAD(SP + 853)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 572)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 573)
  $ => A :XOR
  A :MSTORE(SP + 571)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 853)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 571)
  $ => A :XOR
  $ => B :MLOAD(SP + 872)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 701)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 571)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 606)
  B :MSTORE(SP + 569)
  $ => E :MLOAD(SP + 569)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 570)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 569)
  $ => E :SUB
  $ => A :MLOAD(SP + 606)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 570)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 570)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 606)
  B :MSTORE(SP + 568)
  $ => E :MLOAD(SP + 568)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 569)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 568)
  $ => E :SUB
  $ => A :MLOAD(SP + 606)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 569)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 570)
  $ => A :XOR
  A :MSTORE(SP + 568)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 606)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 568)
  $ => B :XOR
  $ => A :MLOAD(SP + 571)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 624)
  A :MSTORE(SP + 568)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 655)
  A => D
  $ => A :MLOAD(SP + 580)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 567)
  $ => B :MLOAD(SP + 605)
  $ => A :MLOAD(SP + 586)
  $ => C :XOR
  $ => A :MLOAD(SP + 567)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 605)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 566)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 567)
  B :MSTORE(SP + 564)
  $ => E :MLOAD(SP + 564)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 565)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 564)
  $ => E :SUB
  $ => A :MLOAD(SP + 567)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 565)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 565)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 567)
  B :MSTORE(SP + 563)
  $ => E :MLOAD(SP + 563)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 564)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 563)
  $ => E :SUB
  $ => A :MLOAD(SP + 567)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 564)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 565)
  $ => A :XOR
  A :MSTORE(SP + 563)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 567)
  B :MSTORE(SP + 561)
  $ => E :MLOAD(SP + 561)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 562)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 561)
  $ => E :SUB
  $ => A :MLOAD(SP + 567)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 562)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 563)
  $ => B :XOR
  $ => A :MLOAD(SP + 566)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  1294757372n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 574)
  $ => A :ADD
  B :MSTORE(SP + 561)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 560)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 560)
  B :MSTORE(SP + 558)
  $ => E :MLOAD(SP + 558)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 559)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 558)
  $ => E :SUB
  $ => A :MLOAD(SP + 560)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 559)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 559)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 560)
  B :MSTORE(SP + 557)
  $ => E :MLOAD(SP + 557)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 558)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 557)
  $ => E :SUB
  $ => A :MLOAD(SP + 560)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 558)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 559)
  $ => A :XOR
  A :MSTORE(SP + 557)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 560)
  B :MSTORE(SP + 555)
  $ => E :MLOAD(SP + 555)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 556)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 555)
  $ => E :SUB
  $ => A :MLOAD(SP + 560)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 556)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 557)
  $ => A :XOR
  $ => B :MLOAD(SP + 598)
  A => D
  $ => A :MLOAD(SP + 579)
  $ => C :XOR
  $ => A :MLOAD(SP + 560)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 579)
  B => E
  $ => B :MLOAD(SP + 598)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 555)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 834)
  B :MSTORE(SP + 553)
  $ => E :MLOAD(SP + 553)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 554)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 553)
  $ => E :SUB
  $ => A :MLOAD(SP + 834)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 554)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 554)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 834)
  B :MSTORE(SP + 552)
  $ => E :MLOAD(SP + 552)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 553)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 552)
  $ => E :SUB
  $ => A :MLOAD(SP + 834)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 553)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 554)
  $ => A :XOR
  A :MSTORE(SP + 552)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 834)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 552)
  $ => A :XOR
  $ => B :MLOAD(SP + 853)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 682)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 552)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 587)
  B :MSTORE(SP + 550)
  $ => E :MLOAD(SP + 550)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 551)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 550)
  $ => E :SUB
  $ => A :MLOAD(SP + 587)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 551)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 551)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 587)
  B :MSTORE(SP + 549)
  $ => E :MLOAD(SP + 549)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 550)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 549)
  $ => E :SUB
  $ => A :MLOAD(SP + 587)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 550)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 551)
  $ => A :XOR
  A :MSTORE(SP + 549)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 587)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 549)
  $ => B :XOR
  $ => A :MLOAD(SP + 552)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 605)
  A :MSTORE(SP + 549)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 636)
  A => E
  $ => A :MLOAD(SP + 561)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 548)
  $ => B :MLOAD(SP + 586)
  $ => A :MLOAD(SP + 567)
  $ => C :XOR
  $ => A :MLOAD(SP + 548)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 586)
  $ => C :XOR
  E => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 547)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 548)
  B :MSTORE(SP + 545)
  $ => E :MLOAD(SP + 545)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 546)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 545)
  $ => E :SUB
  $ => A :MLOAD(SP + 548)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 546)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 546)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 548)
  B :MSTORE(SP + 544)
  $ => E :MLOAD(SP + 544)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 545)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 544)
  $ => E :SUB
  $ => A :MLOAD(SP + 548)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 545)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 546)
  $ => A :XOR
  A :MSTORE(SP + 544)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 548)
  B :MSTORE(SP + 542)
  $ => E :MLOAD(SP + 542)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 543)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 542)
  $ => E :SUB
  $ => A :MLOAD(SP + 548)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 543)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 544)
  $ => B :XOR
  $ => A :MLOAD(SP + 547)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  1396182291n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 555)
  $ => A :ADD
  B :MSTORE(SP + 542)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 541)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 541)
  B :MSTORE(SP + 539)
  $ => E :MLOAD(SP + 539)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 540)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 539)
  $ => E :SUB
  $ => A :MLOAD(SP + 541)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 540)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 540)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 541)
  B :MSTORE(SP + 538)
  $ => E :MLOAD(SP + 538)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 539)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 538)
  $ => E :SUB
  $ => A :MLOAD(SP + 541)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 539)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 540)
  $ => A :XOR
  A :MSTORE(SP + 538)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 541)
  B :MSTORE(SP + 536)
  $ => E :MLOAD(SP + 536)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 537)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 536)
  $ => E :SUB
  $ => A :MLOAD(SP + 541)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 537)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 538)
  $ => A :XOR
  $ => B :MLOAD(SP + 579)
  A => D
  $ => A :MLOAD(SP + 560)
  $ => C :XOR
  $ => A :MLOAD(SP + 541)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 560)
  B => E
  $ => B :MLOAD(SP + 579)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 536)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 815)
  B :MSTORE(SP + 534)
  $ => E :MLOAD(SP + 534)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 535)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 534)
  $ => E :SUB
  $ => A :MLOAD(SP + 815)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 535)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 535)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 815)
  B :MSTORE(SP + 533)
  $ => E :MLOAD(SP + 533)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 534)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 533)
  $ => E :SUB
  $ => A :MLOAD(SP + 815)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 534)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 535)
  $ => A :XOR
  A :MSTORE(SP + 533)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 815)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 533)
  $ => A :XOR
  $ => B :MLOAD(SP + 834)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 663)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 533)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 568)
  B :MSTORE(SP + 531)
  $ => E :MLOAD(SP + 531)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 532)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 531)
  $ => E :SUB
  $ => A :MLOAD(SP + 568)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 532)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 532)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 568)
  B :MSTORE(SP + 530)
  $ => E :MLOAD(SP + 530)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 531)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 530)
  $ => E :SUB
  $ => A :MLOAD(SP + 568)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 531)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 532)
  $ => A :XOR
  A :MSTORE(SP + 530)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 568)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 530)
  $ => B :XOR
  $ => A :MLOAD(SP + 533)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 586)
  A :MSTORE(SP + 530)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 617)
  A => D
  $ => A :MLOAD(SP + 542)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 529)
  $ => B :MLOAD(SP + 567)
  $ => A :MLOAD(SP + 548)
  $ => C :XOR
  $ => A :MLOAD(SP + 529)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 567)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 528)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 529)
  B :MSTORE(SP + 526)
  $ => E :MLOAD(SP + 526)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 527)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 526)
  $ => E :SUB
  $ => A :MLOAD(SP + 529)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 527)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 527)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 529)
  B :MSTORE(SP + 525)
  $ => E :MLOAD(SP + 525)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 526)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 525)
  $ => E :SUB
  $ => A :MLOAD(SP + 529)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 526)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 527)
  $ => A :XOR
  A :MSTORE(SP + 525)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 529)
  B :MSTORE(SP + 523)
  $ => E :MLOAD(SP + 523)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 524)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 523)
  $ => E :SUB
  $ => A :MLOAD(SP + 529)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 524)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 525)
  $ => B :XOR
  $ => A :MLOAD(SP + 528)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  1695183700n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 536)
  $ => A :ADD
  B :MSTORE(SP + 523)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 522)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 522)
  B :MSTORE(SP + 520)
  $ => E :MLOAD(SP + 520)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 521)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 520)
  $ => E :SUB
  $ => A :MLOAD(SP + 522)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 521)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 521)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 522)
  B :MSTORE(SP + 519)
  $ => E :MLOAD(SP + 519)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 520)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 519)
  $ => E :SUB
  $ => A :MLOAD(SP + 522)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 520)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 521)
  $ => A :XOR
  A :MSTORE(SP + 519)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 522)
  B :MSTORE(SP + 517)
  $ => E :MLOAD(SP + 517)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 518)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 517)
  $ => E :SUB
  $ => A :MLOAD(SP + 522)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 518)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 519)
  $ => A :XOR
  $ => B :MLOAD(SP + 560)
  A => D
  $ => A :MLOAD(SP + 541)
  $ => C :XOR
  $ => A :MLOAD(SP + 522)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 541)
  B => E
  $ => B :MLOAD(SP + 560)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 517)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 796)
  B :MSTORE(SP + 515)
  $ => E :MLOAD(SP + 515)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 516)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 515)
  $ => E :SUB
  $ => A :MLOAD(SP + 796)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 516)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 516)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 796)
  B :MSTORE(SP + 514)
  $ => E :MLOAD(SP + 514)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 515)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 514)
  $ => E :SUB
  $ => A :MLOAD(SP + 796)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 515)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 516)
  $ => A :XOR
  A :MSTORE(SP + 514)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 796)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 514)
  $ => A :XOR
  $ => B :MLOAD(SP + 815)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 644)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 514)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 549)
  B :MSTORE(SP + 512)
  $ => E :MLOAD(SP + 512)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 513)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 512)
  $ => E :SUB
  $ => A :MLOAD(SP + 549)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 513)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 513)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 549)
  B :MSTORE(SP + 511)
  $ => E :MLOAD(SP + 511)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 512)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 511)
  $ => E :SUB
  $ => A :MLOAD(SP + 549)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 512)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 513)
  $ => A :XOR
  A :MSTORE(SP + 511)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 549)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 511)
  $ => B :XOR
  $ => A :MLOAD(SP + 514)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 567)
  A :MSTORE(SP + 511)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 598)
  A => D
  $ => A :MLOAD(SP + 523)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 510)
  $ => B :MLOAD(SP + 548)
  $ => A :MLOAD(SP + 529)
  $ => C :XOR
  $ => A :MLOAD(SP + 510)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 548)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 509)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 510)
  B :MSTORE(SP + 507)
  $ => E :MLOAD(SP + 507)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 508)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 507)
  $ => E :SUB
  $ => A :MLOAD(SP + 510)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 508)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 508)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 510)
  B :MSTORE(SP + 506)
  $ => E :MLOAD(SP + 506)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 507)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 506)
  $ => E :SUB
  $ => A :MLOAD(SP + 510)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 507)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 508)
  $ => A :XOR
  A :MSTORE(SP + 506)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 510)
  B :MSTORE(SP + 504)
  $ => E :MLOAD(SP + 504)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 505)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 504)
  $ => E :SUB
  $ => A :MLOAD(SP + 510)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 505)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 506)
  $ => B :XOR
  $ => A :MLOAD(SP + 509)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  1986661051n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 517)
  $ => A :ADD
  B :MSTORE(SP + 504)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 503)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 503)
  B :MSTORE(SP + 501)
  $ => E :MLOAD(SP + 501)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 502)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 501)
  $ => E :SUB
  $ => A :MLOAD(SP + 503)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 502)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 502)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 503)
  B :MSTORE(SP + 500)
  $ => E :MLOAD(SP + 500)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 501)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 500)
  $ => E :SUB
  $ => A :MLOAD(SP + 503)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 501)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 502)
  $ => A :XOR
  A :MSTORE(SP + 500)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 503)
  B :MSTORE(SP + 498)
  $ => E :MLOAD(SP + 498)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 499)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 498)
  $ => E :SUB
  $ => A :MLOAD(SP + 503)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 499)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 500)
  $ => A :XOR
  $ => B :MLOAD(SP + 541)
  A => E
  $ => A :MLOAD(SP + 522)
  $ => C :XOR
  $ => A :MLOAD(SP + 503)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 522)
  B => D
  $ => B :MLOAD(SP + 541)
  $ => C :AND
  D => A
  C => B
  $ => B :XOR
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 498)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 777)
  B :MSTORE(SP + 496)
  $ => E :MLOAD(SP + 496)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 497)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 496)
  $ => E :SUB
  $ => A :MLOAD(SP + 777)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 497)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 497)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 777)
  B :MSTORE(SP + 495)
  $ => E :MLOAD(SP + 495)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 496)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 495)
  $ => E :SUB
  $ => A :MLOAD(SP + 777)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 496)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 497)
  $ => A :XOR
  A :MSTORE(SP + 495)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 777)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 495)
  $ => A :XOR
  $ => B :MLOAD(SP + 796)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 625)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 495)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 530)
  B :MSTORE(SP + 493)
  $ => E :MLOAD(SP + 493)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 494)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 493)
  $ => E :SUB
  $ => A :MLOAD(SP + 530)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 494)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 494)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 530)
  B :MSTORE(SP + 492)
  $ => E :MLOAD(SP + 492)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 493)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 492)
  $ => E :SUB
  $ => A :MLOAD(SP + 530)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 493)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 494)
  $ => A :XOR
  A :MSTORE(SP + 492)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 530)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 492)
  $ => B :XOR
  $ => A :MLOAD(SP + 495)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 548)
  A :MSTORE(SP + 492)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 579)
  A => D
  $ => A :MLOAD(SP + 504)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 491)
  $ => B :MLOAD(SP + 529)
  $ => A :MLOAD(SP + 510)
  $ => C :XOR
  $ => A :MLOAD(SP + 491)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 529)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 490)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 491)
  B :MSTORE(SP + 488)
  $ => E :MLOAD(SP + 488)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 489)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 488)
  $ => E :SUB
  $ => A :MLOAD(SP + 491)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 489)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 489)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 491)
  B :MSTORE(SP + 487)
  $ => E :MLOAD(SP + 487)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 488)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 487)
  $ => E :SUB
  $ => A :MLOAD(SP + 491)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 488)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 489)
  $ => A :XOR
  A :MSTORE(SP + 487)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 491)
  B :MSTORE(SP + 485)
  $ => E :MLOAD(SP + 485)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 486)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 485)
  $ => E :SUB
  $ => A :MLOAD(SP + 491)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 486)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 487)
  $ => B :XOR
  $ => A :MLOAD(SP + 490)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  2177026350n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 498)
  $ => A :ADD
  B :MSTORE(SP + 485)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 484)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 484)
  B :MSTORE(SP + 482)
  $ => E :MLOAD(SP + 482)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 483)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 482)
  $ => E :SUB
  $ => A :MLOAD(SP + 484)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 483)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 483)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 484)
  B :MSTORE(SP + 481)
  $ => E :MLOAD(SP + 481)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 482)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 481)
  $ => E :SUB
  $ => A :MLOAD(SP + 484)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 482)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 483)
  $ => A :XOR
  A :MSTORE(SP + 481)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 484)
  B :MSTORE(SP + 479)
  $ => E :MLOAD(SP + 479)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 480)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 479)
  $ => E :SUB
  $ => A :MLOAD(SP + 484)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 480)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 481)
  $ => A :XOR
  $ => B :MLOAD(SP + 522)
  A => D
  $ => A :MLOAD(SP + 503)
  $ => C :XOR
  $ => A :MLOAD(SP + 484)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 503)
  B => E
  $ => B :MLOAD(SP + 522)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 479)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 758)
  B :MSTORE(SP + 477)
  $ => E :MLOAD(SP + 477)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 478)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 477)
  $ => E :SUB
  $ => A :MLOAD(SP + 758)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 478)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 478)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 758)
  B :MSTORE(SP + 476)
  $ => E :MLOAD(SP + 476)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 477)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 476)
  $ => E :SUB
  $ => A :MLOAD(SP + 758)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 477)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 478)
  $ => A :XOR
  A :MSTORE(SP + 476)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 758)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 476)
  $ => A :XOR
  $ => B :MLOAD(SP + 777)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 606)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 476)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 511)
  B :MSTORE(SP + 474)
  $ => E :MLOAD(SP + 474)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 475)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 474)
  $ => E :SUB
  $ => A :MLOAD(SP + 511)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 475)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 475)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 511)
  B :MSTORE(SP + 473)
  $ => E :MLOAD(SP + 473)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 474)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 473)
  $ => E :SUB
  $ => A :MLOAD(SP + 511)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 474)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 475)
  $ => A :XOR
  A :MSTORE(SP + 473)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 511)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 473)
  $ => B :XOR
  $ => A :MLOAD(SP + 476)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 529)
  A :MSTORE(SP + 473)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 560)
  A => D
  $ => A :MLOAD(SP + 485)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 472)
  $ => B :MLOAD(SP + 510)
  $ => A :MLOAD(SP + 491)
  $ => C :XOR
  $ => A :MLOAD(SP + 472)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 510)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 471)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 472)
  B :MSTORE(SP + 469)
  $ => E :MLOAD(SP + 469)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 470)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 469)
  $ => E :SUB
  $ => A :MLOAD(SP + 472)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 470)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 470)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 472)
  B :MSTORE(SP + 468)
  $ => E :MLOAD(SP + 468)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 469)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 468)
  $ => E :SUB
  $ => A :MLOAD(SP + 472)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 469)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 470)
  $ => A :XOR
  A :MSTORE(SP + 468)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 472)
  B :MSTORE(SP + 466)
  $ => E :MLOAD(SP + 466)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 467)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 466)
  $ => E :SUB
  $ => A :MLOAD(SP + 472)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 467)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 468)
  $ => B :XOR
  $ => A :MLOAD(SP + 471)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  2456956037n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 479)
  $ => A :ADD
  B :MSTORE(SP + 466)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 465)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 465)
  B :MSTORE(SP + 463)
  $ => E :MLOAD(SP + 463)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 464)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 463)
  $ => E :SUB
  $ => A :MLOAD(SP + 465)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 464)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 464)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 465)
  B :MSTORE(SP + 462)
  $ => E :MLOAD(SP + 462)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 463)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 462)
  $ => E :SUB
  $ => A :MLOAD(SP + 465)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 463)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 464)
  $ => A :XOR
  A :MSTORE(SP + 462)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 465)
  B :MSTORE(SP + 460)
  $ => E :MLOAD(SP + 460)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 461)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 460)
  $ => E :SUB
  $ => A :MLOAD(SP + 465)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 461)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 462)
  $ => A :XOR
  $ => B :MLOAD(SP + 503)
  A => D
  $ => A :MLOAD(SP + 484)
  $ => C :XOR
  $ => A :MLOAD(SP + 465)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 484)
  B => E
  $ => B :MLOAD(SP + 503)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 460)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 739)
  B :MSTORE(SP + 458)
  $ => E :MLOAD(SP + 458)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 459)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 458)
  $ => E :SUB
  $ => A :MLOAD(SP + 739)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 459)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 459)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 739)
  B :MSTORE(SP + 457)
  $ => E :MLOAD(SP + 457)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 458)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 457)
  $ => E :SUB
  $ => A :MLOAD(SP + 739)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 458)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 459)
  $ => A :XOR
  A :MSTORE(SP + 457)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 739)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 457)
  $ => A :XOR
  $ => B :MLOAD(SP + 758)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 587)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 457)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 492)
  B :MSTORE(SP + 455)
  $ => E :MLOAD(SP + 455)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 456)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 455)
  $ => E :SUB
  $ => A :MLOAD(SP + 492)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 456)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 456)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 492)
  B :MSTORE(SP + 454)
  $ => E :MLOAD(SP + 454)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 455)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 454)
  $ => E :SUB
  $ => A :MLOAD(SP + 492)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 455)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 456)
  $ => A :XOR
  A :MSTORE(SP + 454)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 492)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 454)
  $ => B :XOR
  $ => A :MLOAD(SP + 457)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 510)
  A :MSTORE(SP + 454)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 541)
  A => E
  $ => A :MLOAD(SP + 466)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 453)
  $ => B :MLOAD(SP + 491)
  $ => A :MLOAD(SP + 472)
  $ => C :XOR
  $ => A :MLOAD(SP + 453)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 491)
  $ => C :XOR
  E => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 452)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 453)
  B :MSTORE(SP + 450)
  $ => E :MLOAD(SP + 450)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 451)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 450)
  $ => E :SUB
  $ => A :MLOAD(SP + 453)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 451)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 451)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 453)
  B :MSTORE(SP + 449)
  $ => E :MLOAD(SP + 449)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 450)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 449)
  $ => E :SUB
  $ => A :MLOAD(SP + 453)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 450)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 451)
  $ => A :XOR
  A :MSTORE(SP + 449)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 453)
  B :MSTORE(SP + 447)
  $ => E :MLOAD(SP + 447)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 448)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 447)
  $ => E :SUB
  $ => A :MLOAD(SP + 453)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 448)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 449)
  $ => B :XOR
  $ => A :MLOAD(SP + 452)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  2730485921n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 460)
  $ => A :ADD
  B :MSTORE(SP + 447)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 446)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 446)
  B :MSTORE(SP + 444)
  $ => E :MLOAD(SP + 444)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 445)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 444)
  $ => E :SUB
  $ => A :MLOAD(SP + 446)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 445)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 445)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 446)
  B :MSTORE(SP + 443)
  $ => E :MLOAD(SP + 443)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 444)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 443)
  $ => E :SUB
  $ => A :MLOAD(SP + 446)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 444)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 445)
  $ => A :XOR
  A :MSTORE(SP + 443)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 446)
  B :MSTORE(SP + 441)
  $ => E :MLOAD(SP + 441)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 442)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 441)
  $ => E :SUB
  $ => A :MLOAD(SP + 446)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 442)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 443)
  $ => A :XOR
  $ => B :MLOAD(SP + 484)
  A => D
  $ => A :MLOAD(SP + 465)
  $ => C :XOR
  $ => A :MLOAD(SP + 446)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 465)
  B => E
  $ => B :MLOAD(SP + 484)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 441)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 720)
  B :MSTORE(SP + 439)
  $ => E :MLOAD(SP + 439)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 440)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 439)
  $ => E :SUB
  $ => A :MLOAD(SP + 720)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 440)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 440)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 720)
  B :MSTORE(SP + 438)
  $ => E :MLOAD(SP + 438)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 439)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 438)
  $ => E :SUB
  $ => A :MLOAD(SP + 720)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 439)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 440)
  $ => A :XOR
  A :MSTORE(SP + 438)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 720)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 438)
  $ => A :XOR
  $ => B :MLOAD(SP + 739)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 568)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 438)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 473)
  B :MSTORE(SP + 436)
  $ => E :MLOAD(SP + 436)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 437)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 436)
  $ => E :SUB
  $ => A :MLOAD(SP + 473)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 437)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 437)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 473)
  B :MSTORE(SP + 435)
  $ => E :MLOAD(SP + 435)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 436)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 435)
  $ => E :SUB
  $ => A :MLOAD(SP + 473)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 436)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 437)
  $ => A :XOR
  A :MSTORE(SP + 435)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 473)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 435)
  $ => B :XOR
  $ => A :MLOAD(SP + 438)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 491)
  A :MSTORE(SP + 435)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 522)
  A => D
  $ => A :MLOAD(SP + 447)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 434)
  $ => B :MLOAD(SP + 472)
  $ => A :MLOAD(SP + 453)
  $ => C :XOR
  $ => A :MLOAD(SP + 434)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 472)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 433)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 434)
  B :MSTORE(SP + 431)
  $ => E :MLOAD(SP + 431)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 432)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 431)
  $ => E :SUB
  $ => A :MLOAD(SP + 434)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 432)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 432)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 434)
  B :MSTORE(SP + 430)
  $ => E :MLOAD(SP + 430)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 431)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 430)
  $ => E :SUB
  $ => A :MLOAD(SP + 434)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 431)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 432)
  $ => A :XOR
  A :MSTORE(SP + 430)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 434)
  B :MSTORE(SP + 428)
  $ => E :MLOAD(SP + 428)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 429)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 428)
  $ => E :SUB
  $ => A :MLOAD(SP + 434)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 429)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 430)
  $ => B :XOR
  $ => A :MLOAD(SP + 433)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  2820302411n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 441)
  $ => A :ADD
  B :MSTORE(SP + 428)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 427)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 427)
  B :MSTORE(SP + 425)
  $ => E :MLOAD(SP + 425)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 426)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 425)
  $ => E :SUB
  $ => A :MLOAD(SP + 427)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 426)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 426)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 427)
  B :MSTORE(SP + 424)
  $ => E :MLOAD(SP + 424)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 425)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 424)
  $ => E :SUB
  $ => A :MLOAD(SP + 427)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 425)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 426)
  $ => A :XOR
  A :MSTORE(SP + 424)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 427)
  B :MSTORE(SP + 422)
  $ => E :MLOAD(SP + 422)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 423)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 422)
  $ => E :SUB
  $ => A :MLOAD(SP + 427)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 423)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 424)
  $ => A :XOR
  $ => B :MLOAD(SP + 465)
  A => D
  $ => A :MLOAD(SP + 446)
  $ => C :XOR
  $ => A :MLOAD(SP + 427)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 446)
  B => E
  $ => B :MLOAD(SP + 465)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 422)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 701)
  B :MSTORE(SP + 420)
  $ => E :MLOAD(SP + 420)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 421)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 420)
  $ => E :SUB
  $ => A :MLOAD(SP + 701)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 421)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 421)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 701)
  B :MSTORE(SP + 419)
  $ => E :MLOAD(SP + 419)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 420)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 419)
  $ => E :SUB
  $ => A :MLOAD(SP + 701)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 420)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 421)
  $ => A :XOR
  A :MSTORE(SP + 419)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 701)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 419)
  $ => A :XOR
  $ => B :MLOAD(SP + 720)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 549)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 419)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 454)
  B :MSTORE(SP + 417)
  $ => E :MLOAD(SP + 417)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 418)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 417)
  $ => E :SUB
  $ => A :MLOAD(SP + 454)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 418)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 418)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 454)
  B :MSTORE(SP + 416)
  $ => E :MLOAD(SP + 416)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 417)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 416)
  $ => E :SUB
  $ => A :MLOAD(SP + 454)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 417)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 418)
  $ => A :XOR
  A :MSTORE(SP + 416)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 454)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 416)
  $ => B :XOR
  $ => A :MLOAD(SP + 419)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 472)
  A :MSTORE(SP + 416)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 503)
  A => D
  $ => A :MLOAD(SP + 428)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 415)
  $ => B :MLOAD(SP + 453)
  $ => A :MLOAD(SP + 434)
  $ => C :XOR
  $ => A :MLOAD(SP + 415)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 453)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 414)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 415)
  B :MSTORE(SP + 412)
  $ => E :MLOAD(SP + 412)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 413)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 412)
  $ => E :SUB
  $ => A :MLOAD(SP + 415)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 413)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 413)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 415)
  B :MSTORE(SP + 411)
  $ => E :MLOAD(SP + 411)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 412)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 411)
  $ => E :SUB
  $ => A :MLOAD(SP + 415)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 412)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 413)
  $ => A :XOR
  A :MSTORE(SP + 411)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 415)
  B :MSTORE(SP + 409)
  $ => E :MLOAD(SP + 409)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 410)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 409)
  $ => E :SUB
  $ => A :MLOAD(SP + 415)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 410)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 411)
  $ => B :XOR
  $ => A :MLOAD(SP + 414)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  3259730800n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 422)
  $ => A :ADD
  B :MSTORE(SP + 409)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 408)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 408)
  B :MSTORE(SP + 406)
  $ => E :MLOAD(SP + 406)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 407)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 406)
  $ => E :SUB
  $ => A :MLOAD(SP + 408)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 407)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 407)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 408)
  B :MSTORE(SP + 405)
  $ => E :MLOAD(SP + 405)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 406)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 405)
  $ => E :SUB
  $ => A :MLOAD(SP + 408)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 406)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 407)
  $ => A :XOR
  A :MSTORE(SP + 405)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 408)
  B :MSTORE(SP + 403)
  $ => E :MLOAD(SP + 403)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 404)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 403)
  $ => E :SUB
  $ => A :MLOAD(SP + 408)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 404)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 405)
  $ => A :XOR
  $ => B :MLOAD(SP + 446)
  A => E
  $ => A :MLOAD(SP + 427)
  $ => C :XOR
  $ => A :MLOAD(SP + 408)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 427)
  B => D
  $ => B :MLOAD(SP + 446)
  $ => C :AND
  D => A
  C => B
  $ => B :XOR
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 403)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 682)
  B :MSTORE(SP + 401)
  $ => E :MLOAD(SP + 401)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 402)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 401)
  $ => E :SUB
  $ => A :MLOAD(SP + 682)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 402)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 402)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 682)
  B :MSTORE(SP + 400)
  $ => E :MLOAD(SP + 400)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 401)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 400)
  $ => E :SUB
  $ => A :MLOAD(SP + 682)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 401)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 402)
  $ => A :XOR
  A :MSTORE(SP + 400)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 682)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 400)
  $ => A :XOR
  $ => B :MLOAD(SP + 701)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 530)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 400)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 435)
  B :MSTORE(SP + 398)
  $ => E :MLOAD(SP + 398)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 399)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 398)
  $ => E :SUB
  $ => A :MLOAD(SP + 435)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 399)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 399)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 435)
  B :MSTORE(SP + 397)
  $ => E :MLOAD(SP + 397)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 398)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 397)
  $ => E :SUB
  $ => A :MLOAD(SP + 435)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 398)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 399)
  $ => A :XOR
  A :MSTORE(SP + 397)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 435)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 397)
  $ => B :XOR
  $ => A :MLOAD(SP + 400)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 453)
  A :MSTORE(SP + 397)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 484)
  A => D
  $ => A :MLOAD(SP + 409)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 396)
  $ => B :MLOAD(SP + 434)
  $ => A :MLOAD(SP + 415)
  $ => C :XOR
  $ => A :MLOAD(SP + 396)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 434)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 395)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 396)
  B :MSTORE(SP + 393)
  $ => E :MLOAD(SP + 393)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 394)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 393)
  $ => E :SUB
  $ => A :MLOAD(SP + 396)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 394)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 394)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 396)
  B :MSTORE(SP + 392)
  $ => E :MLOAD(SP + 392)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 393)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 392)
  $ => E :SUB
  $ => A :MLOAD(SP + 396)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 393)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 394)
  $ => A :XOR
  A :MSTORE(SP + 392)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 396)
  B :MSTORE(SP + 390)
  $ => E :MLOAD(SP + 390)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 391)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 390)
  $ => E :SUB
  $ => A :MLOAD(SP + 396)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 391)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 392)
  $ => B :XOR
  $ => A :MLOAD(SP + 395)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  3345764771n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 403)
  $ => A :ADD
  B :MSTORE(SP + 390)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 389)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 389)
  B :MSTORE(SP + 387)
  $ => E :MLOAD(SP + 387)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 388)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 387)
  $ => E :SUB
  $ => A :MLOAD(SP + 389)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 388)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 388)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 389)
  B :MSTORE(SP + 386)
  $ => E :MLOAD(SP + 386)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 387)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 386)
  $ => E :SUB
  $ => A :MLOAD(SP + 389)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 387)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 388)
  $ => A :XOR
  A :MSTORE(SP + 386)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 389)
  B :MSTORE(SP + 384)
  $ => E :MLOAD(SP + 384)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 385)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 384)
  $ => E :SUB
  $ => A :MLOAD(SP + 389)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 385)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 386)
  $ => A :XOR
  $ => B :MLOAD(SP + 427)
  A => D
  $ => A :MLOAD(SP + 408)
  $ => C :XOR
  $ => A :MLOAD(SP + 389)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 408)
  B => E
  $ => B :MLOAD(SP + 427)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 384)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 663)
  B :MSTORE(SP + 382)
  $ => E :MLOAD(SP + 382)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 383)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 382)
  $ => E :SUB
  $ => A :MLOAD(SP + 663)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 383)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 383)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 663)
  B :MSTORE(SP + 381)
  $ => E :MLOAD(SP + 381)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 382)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 381)
  $ => E :SUB
  $ => A :MLOAD(SP + 663)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 382)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 383)
  $ => A :XOR
  A :MSTORE(SP + 381)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 663)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 381)
  $ => A :XOR
  $ => B :MLOAD(SP + 682)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 511)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 381)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 416)
  B :MSTORE(SP + 379)
  $ => E :MLOAD(SP + 379)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 380)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 379)
  $ => E :SUB
  $ => A :MLOAD(SP + 416)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 380)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 380)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 416)
  B :MSTORE(SP + 378)
  $ => E :MLOAD(SP + 378)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 379)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 378)
  $ => E :SUB
  $ => A :MLOAD(SP + 416)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 379)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 380)
  $ => A :XOR
  A :MSTORE(SP + 378)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 416)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 378)
  $ => B :XOR
  $ => A :MLOAD(SP + 381)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 434)
  A :MSTORE(SP + 378)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 465)
  A => D
  $ => A :MLOAD(SP + 390)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 377)
  $ => B :MLOAD(SP + 415)
  $ => A :MLOAD(SP + 396)
  $ => C :XOR
  $ => A :MLOAD(SP + 377)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 415)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 376)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 377)
  B :MSTORE(SP + 374)
  $ => E :MLOAD(SP + 374)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 375)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 374)
  $ => E :SUB
  $ => A :MLOAD(SP + 377)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 375)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 375)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 377)
  B :MSTORE(SP + 373)
  $ => E :MLOAD(SP + 373)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 374)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 373)
  $ => E :SUB
  $ => A :MLOAD(SP + 377)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 374)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 375)
  $ => A :XOR
  A :MSTORE(SP + 373)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 377)
  B :MSTORE(SP + 371)
  $ => E :MLOAD(SP + 371)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 372)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 371)
  $ => E :SUB
  $ => A :MLOAD(SP + 377)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 372)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 373)
  $ => B :XOR
  $ => A :MLOAD(SP + 376)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  3516065817n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 384)
  $ => A :ADD
  B :MSTORE(SP + 371)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 370)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 370)
  B :MSTORE(SP + 368)
  $ => E :MLOAD(SP + 368)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 369)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 368)
  $ => E :SUB
  $ => A :MLOAD(SP + 370)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 369)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 369)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 370)
  B :MSTORE(SP + 367)
  $ => E :MLOAD(SP + 367)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 368)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 367)
  $ => E :SUB
  $ => A :MLOAD(SP + 370)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 368)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 369)
  $ => A :XOR
  A :MSTORE(SP + 367)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 370)
  B :MSTORE(SP + 365)
  $ => E :MLOAD(SP + 365)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 366)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 365)
  $ => E :SUB
  $ => A :MLOAD(SP + 370)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 366)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 367)
  $ => A :XOR
  $ => B :MLOAD(SP + 408)
  A => D
  $ => A :MLOAD(SP + 389)
  $ => C :XOR
  $ => A :MLOAD(SP + 370)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 389)
  B => E
  $ => B :MLOAD(SP + 408)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 365)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 644)
  B :MSTORE(SP + 363)
  $ => E :MLOAD(SP + 363)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 364)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 363)
  $ => E :SUB
  $ => A :MLOAD(SP + 644)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 364)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 364)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 644)
  B :MSTORE(SP + 362)
  $ => E :MLOAD(SP + 362)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 363)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 362)
  $ => E :SUB
  $ => A :MLOAD(SP + 644)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 363)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 364)
  $ => A :XOR
  A :MSTORE(SP + 362)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 644)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 362)
  $ => A :XOR
  $ => B :MLOAD(SP + 663)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 492)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 362)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 397)
  B :MSTORE(SP + 360)
  $ => E :MLOAD(SP + 360)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 361)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 360)
  $ => E :SUB
  $ => A :MLOAD(SP + 397)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 361)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 361)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 397)
  B :MSTORE(SP + 359)
  $ => E :MLOAD(SP + 359)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 360)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 359)
  $ => E :SUB
  $ => A :MLOAD(SP + 397)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 360)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 361)
  $ => A :XOR
  A :MSTORE(SP + 359)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 397)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 359)
  $ => B :XOR
  $ => A :MLOAD(SP + 362)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 415)
  A :MSTORE(SP + 359)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 446)
  A => E
  $ => A :MLOAD(SP + 371)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 358)
  $ => B :MLOAD(SP + 396)
  $ => A :MLOAD(SP + 377)
  $ => C :XOR
  $ => A :MLOAD(SP + 358)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 396)
  $ => C :XOR
  E => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 357)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 358)
  B :MSTORE(SP + 355)
  $ => E :MLOAD(SP + 355)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 356)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 355)
  $ => E :SUB
  $ => A :MLOAD(SP + 358)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 356)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 356)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 358)
  B :MSTORE(SP + 354)
  $ => E :MLOAD(SP + 354)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 355)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 354)
  $ => E :SUB
  $ => A :MLOAD(SP + 358)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 355)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 356)
  $ => A :XOR
  A :MSTORE(SP + 354)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 358)
  B :MSTORE(SP + 352)
  $ => E :MLOAD(SP + 352)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 353)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 352)
  $ => E :SUB
  $ => A :MLOAD(SP + 358)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 353)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 354)
  $ => B :XOR
  $ => A :MLOAD(SP + 357)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  3600352804n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 365)
  $ => A :ADD
  B :MSTORE(SP + 352)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 351)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 351)
  B :MSTORE(SP + 349)
  $ => E :MLOAD(SP + 349)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 350)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 349)
  $ => E :SUB
  $ => A :MLOAD(SP + 351)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 350)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 350)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 351)
  B :MSTORE(SP + 348)
  $ => E :MLOAD(SP + 348)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 349)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 348)
  $ => E :SUB
  $ => A :MLOAD(SP + 351)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 349)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 350)
  $ => A :XOR
  A :MSTORE(SP + 348)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 351)
  B :MSTORE(SP + 346)
  $ => E :MLOAD(SP + 346)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 347)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 346)
  $ => E :SUB
  $ => A :MLOAD(SP + 351)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 347)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 348)
  $ => A :XOR
  $ => B :MLOAD(SP + 389)
  A => D
  $ => A :MLOAD(SP + 370)
  $ => C :XOR
  $ => A :MLOAD(SP + 351)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 370)
  B => E
  $ => B :MLOAD(SP + 389)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 346)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 625)
  B :MSTORE(SP + 344)
  $ => E :MLOAD(SP + 344)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 345)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 344)
  $ => E :SUB
  $ => A :MLOAD(SP + 625)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 345)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 345)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 625)
  B :MSTORE(SP + 343)
  $ => E :MLOAD(SP + 343)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 344)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 343)
  $ => E :SUB
  $ => A :MLOAD(SP + 625)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 344)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 345)
  $ => A :XOR
  A :MSTORE(SP + 343)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 625)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 343)
  $ => A :XOR
  $ => B :MLOAD(SP + 644)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 473)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 343)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 378)
  B :MSTORE(SP + 341)
  $ => E :MLOAD(SP + 341)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 342)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 341)
  $ => E :SUB
  $ => A :MLOAD(SP + 378)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 342)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 342)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 378)
  B :MSTORE(SP + 340)
  $ => E :MLOAD(SP + 340)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 341)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 340)
  $ => E :SUB
  $ => A :MLOAD(SP + 378)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 341)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 342)
  $ => A :XOR
  A :MSTORE(SP + 340)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 378)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 340)
  $ => B :XOR
  $ => A :MLOAD(SP + 343)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 396)
  A :MSTORE(SP + 340)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 427)
  A => D
  $ => A :MLOAD(SP + 352)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 339)
  $ => B :MLOAD(SP + 377)
  $ => A :MLOAD(SP + 358)
  $ => C :XOR
  $ => A :MLOAD(SP + 339)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 377)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 338)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 339)
  B :MSTORE(SP + 336)
  $ => E :MLOAD(SP + 336)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 337)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 336)
  $ => E :SUB
  $ => A :MLOAD(SP + 339)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 337)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 337)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 339)
  B :MSTORE(SP + 335)
  $ => E :MLOAD(SP + 335)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 336)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 335)
  $ => E :SUB
  $ => A :MLOAD(SP + 339)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 336)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 337)
  $ => A :XOR
  A :MSTORE(SP + 335)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 339)
  B :MSTORE(SP + 333)
  $ => E :MLOAD(SP + 333)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 334)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 333)
  $ => E :SUB
  $ => A :MLOAD(SP + 339)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 334)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 335)
  $ => B :XOR
  $ => A :MLOAD(SP + 338)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  4094571909n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 346)
  $ => A :ADD
  B :MSTORE(SP + 333)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 332)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 332)
  B :MSTORE(SP + 330)
  $ => E :MLOAD(SP + 330)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 331)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 330)
  $ => E :SUB
  $ => A :MLOAD(SP + 332)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 331)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 331)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 332)
  B :MSTORE(SP + 329)
  $ => E :MLOAD(SP + 329)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 330)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 329)
  $ => E :SUB
  $ => A :MLOAD(SP + 332)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 330)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 331)
  $ => A :XOR
  A :MSTORE(SP + 329)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 332)
  B :MSTORE(SP + 327)
  $ => E :MLOAD(SP + 327)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 328)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 327)
  $ => E :SUB
  $ => A :MLOAD(SP + 332)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 328)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 329)
  $ => A :XOR
  $ => B :MLOAD(SP + 370)
  A => D
  $ => A :MLOAD(SP + 351)
  $ => C :XOR
  $ => A :MLOAD(SP + 332)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 351)
  B => E
  $ => B :MLOAD(SP + 370)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 327)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 606)
  B :MSTORE(SP + 325)
  $ => E :MLOAD(SP + 325)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 326)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 325)
  $ => E :SUB
  $ => A :MLOAD(SP + 606)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 326)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 326)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 606)
  B :MSTORE(SP + 324)
  $ => E :MLOAD(SP + 324)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 325)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 324)
  $ => E :SUB
  $ => A :MLOAD(SP + 606)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 325)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 326)
  $ => A :XOR
  A :MSTORE(SP + 324)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 606)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 324)
  $ => A :XOR
  $ => B :MLOAD(SP + 625)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 454)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 324)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 359)
  B :MSTORE(SP + 322)
  $ => E :MLOAD(SP + 322)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 323)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 322)
  $ => E :SUB
  $ => A :MLOAD(SP + 359)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 323)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 323)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 359)
  B :MSTORE(SP + 321)
  $ => E :MLOAD(SP + 321)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 322)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 321)
  $ => E :SUB
  $ => A :MLOAD(SP + 359)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 322)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 323)
  $ => A :XOR
  A :MSTORE(SP + 321)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 359)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 321)
  $ => B :XOR
  $ => A :MLOAD(SP + 324)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 377)
  A :MSTORE(SP + 321)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 408)
  A => D
  $ => A :MLOAD(SP + 333)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 320)
  $ => B :MLOAD(SP + 358)
  $ => A :MLOAD(SP + 339)
  $ => C :XOR
  $ => A :MLOAD(SP + 320)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 358)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 319)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 320)
  B :MSTORE(SP + 317)
  $ => E :MLOAD(SP + 317)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 318)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 317)
  $ => E :SUB
  $ => A :MLOAD(SP + 320)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 318)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 318)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 320)
  B :MSTORE(SP + 316)
  $ => E :MLOAD(SP + 316)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 317)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 316)
  $ => E :SUB
  $ => A :MLOAD(SP + 320)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 317)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 318)
  $ => A :XOR
  A :MSTORE(SP + 316)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 320)
  B :MSTORE(SP + 314)
  $ => E :MLOAD(SP + 314)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 315)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 314)
  $ => E :SUB
  $ => A :MLOAD(SP + 320)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 315)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 316)
  $ => B :XOR
  $ => A :MLOAD(SP + 319)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  275423344n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 327)
  $ => A :ADD
  B :MSTORE(SP + 314)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 313)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 313)
  B :MSTORE(SP + 311)
  $ => E :MLOAD(SP + 311)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 312)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 311)
  $ => E :SUB
  $ => A :MLOAD(SP + 313)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 312)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 312)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 313)
  B :MSTORE(SP + 310)
  $ => E :MLOAD(SP + 310)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 311)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 310)
  $ => E :SUB
  $ => A :MLOAD(SP + 313)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 311)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 312)
  $ => A :XOR
  A :MSTORE(SP + 310)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 313)
  B :MSTORE(SP + 308)
  $ => E :MLOAD(SP + 308)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 309)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 308)
  $ => E :SUB
  $ => A :MLOAD(SP + 313)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 309)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 310)
  $ => A :XOR
  $ => B :MLOAD(SP + 351)
  A => E
  $ => A :MLOAD(SP + 332)
  $ => C :XOR
  $ => A :MLOAD(SP + 313)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 332)
  B => D
  $ => B :MLOAD(SP + 351)
  $ => C :AND
  D => A
  C => B
  $ => B :XOR
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 308)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 587)
  B :MSTORE(SP + 306)
  $ => E :MLOAD(SP + 306)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 307)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 306)
  $ => E :SUB
  $ => A :MLOAD(SP + 587)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 307)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 307)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 587)
  B :MSTORE(SP + 305)
  $ => E :MLOAD(SP + 305)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 306)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 305)
  $ => E :SUB
  $ => A :MLOAD(SP + 587)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 306)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 307)
  $ => A :XOR
  A :MSTORE(SP + 305)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 587)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 305)
  $ => A :XOR
  $ => B :MLOAD(SP + 606)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 435)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 305)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 340)
  B :MSTORE(SP + 303)
  $ => E :MLOAD(SP + 303)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 304)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 303)
  $ => E :SUB
  $ => A :MLOAD(SP + 340)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 304)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 304)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 340)
  B :MSTORE(SP + 302)
  $ => E :MLOAD(SP + 302)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 303)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 302)
  $ => E :SUB
  $ => A :MLOAD(SP + 340)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 303)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 304)
  $ => A :XOR
  A :MSTORE(SP + 302)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 340)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 302)
  $ => B :XOR
  $ => A :MLOAD(SP + 305)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 358)
  A :MSTORE(SP + 302)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 389)
  A => D
  $ => A :MLOAD(SP + 314)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 301)
  $ => B :MLOAD(SP + 339)
  $ => A :MLOAD(SP + 320)
  $ => C :XOR
  $ => A :MLOAD(SP + 301)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 339)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 300)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 301)
  B :MSTORE(SP + 298)
  $ => E :MLOAD(SP + 298)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 299)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 298)
  $ => E :SUB
  $ => A :MLOAD(SP + 301)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 299)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 299)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 301)
  B :MSTORE(SP + 297)
  $ => E :MLOAD(SP + 297)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 298)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 297)
  $ => E :SUB
  $ => A :MLOAD(SP + 301)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 298)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 299)
  $ => A :XOR
  A :MSTORE(SP + 297)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 301)
  B :MSTORE(SP + 295)
  $ => E :MLOAD(SP + 295)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 296)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 295)
  $ => E :SUB
  $ => A :MLOAD(SP + 301)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 296)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 297)
  $ => B :XOR
  $ => A :MLOAD(SP + 300)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  430227734n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 308)
  $ => A :ADD
  B :MSTORE(SP + 295)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 294)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 294)
  B :MSTORE(SP + 292)
  $ => E :MLOAD(SP + 292)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 293)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 292)
  $ => E :SUB
  $ => A :MLOAD(SP + 294)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 293)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 293)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 294)
  B :MSTORE(SP + 291)
  $ => E :MLOAD(SP + 291)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 292)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 291)
  $ => E :SUB
  $ => A :MLOAD(SP + 294)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 292)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 293)
  $ => A :XOR
  A :MSTORE(SP + 291)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 294)
  B :MSTORE(SP + 289)
  $ => E :MLOAD(SP + 289)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 290)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 289)
  $ => E :SUB
  $ => A :MLOAD(SP + 294)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 290)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 291)
  $ => A :XOR
  $ => B :MLOAD(SP + 332)
  A => D
  $ => A :MLOAD(SP + 313)
  $ => C :XOR
  $ => A :MLOAD(SP + 294)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 313)
  B => E
  $ => B :MLOAD(SP + 332)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 289)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 568)
  B :MSTORE(SP + 287)
  $ => E :MLOAD(SP + 287)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 288)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 287)
  $ => E :SUB
  $ => A :MLOAD(SP + 568)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 288)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 288)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 568)
  B :MSTORE(SP + 286)
  $ => E :MLOAD(SP + 286)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 287)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 286)
  $ => E :SUB
  $ => A :MLOAD(SP + 568)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 287)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 288)
  $ => A :XOR
  A :MSTORE(SP + 286)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 568)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 286)
  $ => A :XOR
  $ => B :MLOAD(SP + 587)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 416)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 286)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 321)
  B :MSTORE(SP + 284)
  $ => E :MLOAD(SP + 284)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 285)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 284)
  $ => E :SUB
  $ => A :MLOAD(SP + 321)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 285)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 285)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 321)
  B :MSTORE(SP + 283)
  $ => E :MLOAD(SP + 283)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 284)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 283)
  $ => E :SUB
  $ => A :MLOAD(SP + 321)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 284)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 285)
  $ => A :XOR
  A :MSTORE(SP + 283)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 321)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 283)
  $ => B :XOR
  $ => A :MLOAD(SP + 286)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 339)
  $ => E :ADD
  A :MSTORE(SP + 283)
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 370)
  A => D
  $ => A :MLOAD(SP + 295)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 282)
  $ => B :MLOAD(SP + 320)
  $ => A :MLOAD(SP + 301)
  $ => C :XOR
  $ => A :MLOAD(SP + 282)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 320)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 281)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 282)
  B :MSTORE(SP + 279)
  $ => E :MLOAD(SP + 279)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 280)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 279)
  $ => E :SUB
  $ => A :MLOAD(SP + 282)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 280)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 280)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 282)
  B :MSTORE(SP + 278)
  $ => E :MLOAD(SP + 278)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 279)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 278)
  $ => E :SUB
  $ => A :MLOAD(SP + 282)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 279)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 280)
  $ => A :XOR
  A :MSTORE(SP + 278)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 282)
  B :MSTORE(SP + 276)
  $ => E :MLOAD(SP + 276)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 277)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 276)
  $ => E :SUB
  $ => A :MLOAD(SP + 282)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 277)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 278)
  $ => B :XOR
  $ => A :MLOAD(SP + 281)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  506948616n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 289)
  $ => A :ADD
  B :MSTORE(SP + 276)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 275)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 275)
  B :MSTORE(SP + 273)
  $ => E :MLOAD(SP + 273)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 274)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 273)
  $ => E :SUB
  $ => A :MLOAD(SP + 275)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 274)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 274)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 275)
  B :MSTORE(SP + 272)
  $ => E :MLOAD(SP + 272)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 273)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 272)
  $ => E :SUB
  $ => A :MLOAD(SP + 275)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 273)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 274)
  $ => A :XOR
  A :MSTORE(SP + 272)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 275)
  B :MSTORE(SP + 270)
  $ => E :MLOAD(SP + 270)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 271)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 270)
  $ => E :SUB
  $ => A :MLOAD(SP + 275)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 271)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 272)
  $ => A :XOR
  $ => B :MLOAD(SP + 313)
  A => E
  $ => A :MLOAD(SP + 294)
  $ => C :XOR
  $ => A :MLOAD(SP + 275)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 294)
  B => D
  $ => B :MLOAD(SP + 313)
  $ => C :AND
  D => A
  C => B
  $ => B :XOR
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 270)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 549)
  B :MSTORE(SP + 268)
  $ => E :MLOAD(SP + 268)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 269)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 268)
  $ => E :SUB
  $ => A :MLOAD(SP + 549)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 269)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 269)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 549)
  B :MSTORE(SP + 267)
  $ => E :MLOAD(SP + 267)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 268)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 267)
  $ => E :SUB
  $ => A :MLOAD(SP + 549)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 268)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 269)
  $ => A :XOR
  A :MSTORE(SP + 267)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 549)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 267)
  $ => A :XOR
  $ => B :MLOAD(SP + 568)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 397)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 267)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 302)
  B :MSTORE(SP + 265)
  $ => E :MLOAD(SP + 265)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 266)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 265)
  $ => E :SUB
  $ => A :MLOAD(SP + 302)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 266)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 266)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 302)
  B :MSTORE(SP + 264)
  $ => E :MLOAD(SP + 264)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 265)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 264)
  $ => E :SUB
  $ => A :MLOAD(SP + 302)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 265)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 266)
  $ => A :XOR
  A :MSTORE(SP + 264)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 302)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 264)
  $ => B :XOR
  $ => A :MLOAD(SP + 267)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 320)
  $ => E :ADD
  A :MSTORE(SP + 264)
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 351)
  A => D
  $ => A :MLOAD(SP + 276)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 263)
  $ => B :MLOAD(SP + 301)
  $ => A :MLOAD(SP + 282)
  $ => C :XOR
  $ => A :MLOAD(SP + 263)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 301)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 262)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 263)
  B :MSTORE(SP + 260)
  $ => E :MLOAD(SP + 260)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 261)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 260)
  $ => E :SUB
  $ => A :MLOAD(SP + 263)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 261)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 261)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 263)
  B :MSTORE(SP + 259)
  $ => E :MLOAD(SP + 259)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 260)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 259)
  $ => E :SUB
  $ => A :MLOAD(SP + 263)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 260)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 261)
  $ => A :XOR
  A :MSTORE(SP + 259)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 263)
  B :MSTORE(SP + 257)
  $ => E :MLOAD(SP + 257)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 258)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 257)
  $ => E :SUB
  $ => A :MLOAD(SP + 263)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 258)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 259)
  $ => B :XOR
  $ => A :MLOAD(SP + 262)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  659060556n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 270)
  $ => A :ADD
  B :MSTORE(SP + 257)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 256)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 256)
  B :MSTORE(SP + 254)
  $ => E :MLOAD(SP + 254)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 255)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 254)
  $ => E :SUB
  $ => A :MLOAD(SP + 256)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 255)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 255)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 256)
  B :MSTORE(SP + 253)
  $ => E :MLOAD(SP + 253)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 254)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 253)
  $ => E :SUB
  $ => A :MLOAD(SP + 256)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 254)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 255)
  $ => A :XOR
  A :MSTORE(SP + 253)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 256)
  B :MSTORE(SP + 251)
  $ => E :MLOAD(SP + 251)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 252)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 251)
  $ => E :SUB
  $ => A :MLOAD(SP + 256)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 252)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 253)
  $ => A :XOR
  $ => B :MLOAD(SP + 294)
  A => D
  $ => A :MLOAD(SP + 275)
  $ => C :XOR
  $ => A :MLOAD(SP + 256)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 275)
  B => E
  $ => B :MLOAD(SP + 294)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 251)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 530)
  B :MSTORE(SP + 249)
  $ => E :MLOAD(SP + 249)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 250)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 249)
  $ => E :SUB
  $ => A :MLOAD(SP + 530)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 250)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 250)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 530)
  B :MSTORE(SP + 248)
  $ => E :MLOAD(SP + 248)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 249)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 248)
  $ => E :SUB
  $ => A :MLOAD(SP + 530)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 249)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 250)
  $ => A :XOR
  A :MSTORE(SP + 248)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 530)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 248)
  $ => A :XOR
  $ => B :MLOAD(SP + 549)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 378)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 248)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 283)
  B :MSTORE(SP + 246)
  $ => E :MLOAD(SP + 246)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 247)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 246)
  $ => E :SUB
  $ => A :MLOAD(SP + 283)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 247)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 247)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 283)
  B :MSTORE(SP + 245)
  $ => E :MLOAD(SP + 245)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 246)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 245)
  $ => E :SUB
  $ => A :MLOAD(SP + 283)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 246)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 247)
  $ => A :XOR
  A :MSTORE(SP + 245)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 283)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 245)
  $ => B :XOR
  $ => A :MLOAD(SP + 248)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 301)
  $ => E :ADD
  A :MSTORE(SP + 245)
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 332)
  A => E
  $ => A :MLOAD(SP + 257)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 244)
  $ => B :MLOAD(SP + 282)
  $ => A :MLOAD(SP + 263)
  $ => C :XOR
  $ => A :MLOAD(SP + 244)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 282)
  $ => C :XOR
  E => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 243)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 244)
  B :MSTORE(SP + 241)
  $ => E :MLOAD(SP + 241)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 242)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 241)
  $ => E :SUB
  $ => A :MLOAD(SP + 244)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 242)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 242)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 244)
  B :MSTORE(SP + 240)
  $ => E :MLOAD(SP + 240)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 241)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 240)
  $ => E :SUB
  $ => A :MLOAD(SP + 244)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 241)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 242)
  $ => A :XOR
  A :MSTORE(SP + 240)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 244)
  B :MSTORE(SP + 238)
  $ => E :MLOAD(SP + 238)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 239)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 238)
  $ => E :SUB
  $ => A :MLOAD(SP + 244)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 239)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 240)
  $ => B :XOR
  $ => A :MLOAD(SP + 243)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  883997877n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 251)
  $ => A :ADD
  B :MSTORE(SP + 238)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 237)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 237)
  B :MSTORE(SP + 235)
  $ => E :MLOAD(SP + 235)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 236)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 235)
  $ => E :SUB
  $ => A :MLOAD(SP + 237)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 236)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 236)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 237)
  B :MSTORE(SP + 234)
  $ => E :MLOAD(SP + 234)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 235)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 234)
  $ => E :SUB
  $ => A :MLOAD(SP + 237)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 235)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 236)
  $ => A :XOR
  A :MSTORE(SP + 234)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 237)
  B :MSTORE(SP + 232)
  $ => E :MLOAD(SP + 232)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 233)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 232)
  $ => E :SUB
  $ => A :MLOAD(SP + 237)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 233)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 234)
  $ => A :XOR
  $ => B :MLOAD(SP + 275)
  A => D
  $ => A :MLOAD(SP + 256)
  $ => C :XOR
  $ => A :MLOAD(SP + 237)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 256)
  B => E
  $ => B :MLOAD(SP + 275)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 232)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 511)
  B :MSTORE(SP + 230)
  $ => E :MLOAD(SP + 230)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 231)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 230)
  $ => E :SUB
  $ => A :MLOAD(SP + 511)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 231)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 231)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 511)
  B :MSTORE(SP + 229)
  $ => E :MLOAD(SP + 229)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 230)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 229)
  $ => E :SUB
  $ => A :MLOAD(SP + 511)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 230)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 231)
  $ => A :XOR
  A :MSTORE(SP + 229)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 511)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 229)
  $ => A :XOR
  $ => B :MLOAD(SP + 530)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 359)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 229)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 264)
  B :MSTORE(SP + 227)
  $ => E :MLOAD(SP + 227)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 228)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 227)
  $ => E :SUB
  $ => A :MLOAD(SP + 264)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 228)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 228)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 264)
  B :MSTORE(SP + 226)
  $ => E :MLOAD(SP + 226)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 227)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 226)
  $ => E :SUB
  $ => A :MLOAD(SP + 264)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 227)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 228)
  $ => A :XOR
  A :MSTORE(SP + 226)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 264)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 226)
  $ => B :XOR
  $ => A :MLOAD(SP + 229)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 282)
  $ => E :ADD
  A :MSTORE(SP + 226)
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 313)
  A => D
  $ => A :MLOAD(SP + 238)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 225)
  $ => B :MLOAD(SP + 263)
  $ => A :MLOAD(SP + 244)
  $ => C :XOR
  $ => A :MLOAD(SP + 225)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 263)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 224)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 225)
  B :MSTORE(SP + 222)
  $ => E :MLOAD(SP + 222)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 223)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 222)
  $ => E :SUB
  $ => A :MLOAD(SP + 225)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 223)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 223)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 225)
  B :MSTORE(SP + 221)
  $ => E :MLOAD(SP + 221)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 222)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 221)
  $ => E :SUB
  $ => A :MLOAD(SP + 225)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 222)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 223)
  $ => A :XOR
  A :MSTORE(SP + 221)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 225)
  B :MSTORE(SP + 219)
  $ => E :MLOAD(SP + 219)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 220)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 219)
  $ => E :SUB
  $ => A :MLOAD(SP + 225)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 220)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 221)
  $ => B :XOR
  $ => A :MLOAD(SP + 224)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  958139571n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 232)
  $ => A :ADD
  B :MSTORE(SP + 219)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 218)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 218)
  B :MSTORE(SP + 216)
  $ => E :MLOAD(SP + 216)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 217)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 216)
  $ => E :SUB
  $ => A :MLOAD(SP + 218)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 217)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 217)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 218)
  B :MSTORE(SP + 215)
  $ => E :MLOAD(SP + 215)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 216)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 215)
  $ => E :SUB
  $ => A :MLOAD(SP + 218)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 216)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 217)
  $ => A :XOR
  A :MSTORE(SP + 215)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 218)
  B :MSTORE(SP + 213)
  $ => E :MLOAD(SP + 213)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 214)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 213)
  $ => E :SUB
  $ => A :MLOAD(SP + 218)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 214)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 215)
  $ => A :XOR
  $ => B :MLOAD(SP + 256)
  A => D
  $ => A :MLOAD(SP + 237)
  $ => C :XOR
  $ => A :MLOAD(SP + 218)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 237)
  B => E
  $ => B :MLOAD(SP + 256)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 213)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 492)
  B :MSTORE(SP + 211)
  $ => E :MLOAD(SP + 211)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 212)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 211)
  $ => E :SUB
  $ => A :MLOAD(SP + 492)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 212)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 212)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 492)
  B :MSTORE(SP + 210)
  $ => E :MLOAD(SP + 210)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 211)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 210)
  $ => E :SUB
  $ => A :MLOAD(SP + 492)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 211)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 212)
  $ => A :XOR
  A :MSTORE(SP + 210)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 492)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 210)
  $ => A :XOR
  $ => B :MLOAD(SP + 511)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 340)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 210)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 245)
  B :MSTORE(SP + 208)
  $ => E :MLOAD(SP + 208)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 209)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 208)
  $ => E :SUB
  $ => A :MLOAD(SP + 245)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 209)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 209)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 245)
  B :MSTORE(SP + 207)
  $ => E :MLOAD(SP + 207)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 208)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 207)
  $ => E :SUB
  $ => A :MLOAD(SP + 245)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 208)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 209)
  $ => A :XOR
  A :MSTORE(SP + 207)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 245)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 207)
  $ => B :XOR
  $ => A :MLOAD(SP + 210)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 263)
  $ => E :ADD
  A :MSTORE(SP + 207)
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 294)
  A => D
  $ => A :MLOAD(SP + 219)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 206)
  $ => B :MLOAD(SP + 244)
  $ => A :MLOAD(SP + 225)
  $ => C :XOR
  $ => A :MLOAD(SP + 206)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 244)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 205)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 206)
  B :MSTORE(SP + 203)
  $ => E :MLOAD(SP + 203)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 204)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 203)
  $ => E :SUB
  $ => A :MLOAD(SP + 206)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 204)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 204)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 206)
  B :MSTORE(SP + 202)
  $ => E :MLOAD(SP + 202)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 203)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 202)
  $ => E :SUB
  $ => A :MLOAD(SP + 206)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 203)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 204)
  $ => A :XOR
  A :MSTORE(SP + 202)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 206)
  B :MSTORE(SP + 200)
  $ => E :MLOAD(SP + 200)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 201)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 200)
  $ => E :SUB
  $ => A :MLOAD(SP + 206)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 201)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 202)
  $ => B :XOR
  $ => A :MLOAD(SP + 205)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  1322822218n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 213)
  $ => A :ADD
  B :MSTORE(SP + 200)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 199)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 199)
  B :MSTORE(SP + 197)
  $ => E :MLOAD(SP + 197)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 198)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 197)
  $ => E :SUB
  $ => A :MLOAD(SP + 199)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 198)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 198)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 199)
  B :MSTORE(SP + 196)
  $ => E :MLOAD(SP + 196)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 197)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 196)
  $ => E :SUB
  $ => A :MLOAD(SP + 199)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 197)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 198)
  $ => A :XOR
  A :MSTORE(SP + 196)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 199)
  B :MSTORE(SP + 194)
  $ => E :MLOAD(SP + 194)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 195)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 194)
  $ => E :SUB
  $ => A :MLOAD(SP + 199)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 195)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 196)
  $ => A :XOR
  $ => B :MLOAD(SP + 237)
  A => D
  $ => A :MLOAD(SP + 218)
  $ => C :XOR
  $ => A :MLOAD(SP + 199)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 218)
  B => E
  $ => B :MLOAD(SP + 237)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 194)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 473)
  B :MSTORE(SP + 192)
  $ => E :MLOAD(SP + 192)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 193)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 192)
  $ => E :SUB
  $ => A :MLOAD(SP + 473)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 193)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 193)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 473)
  B :MSTORE(SP + 191)
  $ => E :MLOAD(SP + 191)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 192)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 191)
  $ => E :SUB
  $ => A :MLOAD(SP + 473)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 192)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 193)
  $ => A :XOR
  A :MSTORE(SP + 191)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 473)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 191)
  $ => A :XOR
  $ => B :MLOAD(SP + 492)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 321)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 191)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 226)
  B :MSTORE(SP + 189)
  $ => E :MLOAD(SP + 189)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 190)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 189)
  $ => E :SUB
  $ => A :MLOAD(SP + 226)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 190)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 190)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 226)
  B :MSTORE(SP + 188)
  $ => E :MLOAD(SP + 188)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 189)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 188)
  $ => E :SUB
  $ => A :MLOAD(SP + 226)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 189)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 190)
  $ => A :XOR
  A :MSTORE(SP + 188)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 226)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 188)
  $ => B :XOR
  $ => A :MLOAD(SP + 191)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 244)
  $ => E :ADD
  A :MSTORE(SP + 188)
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 275)
  A => D
  $ => A :MLOAD(SP + 200)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 187)
  $ => B :MLOAD(SP + 225)
  $ => A :MLOAD(SP + 206)
  $ => C :XOR
  $ => A :MLOAD(SP + 187)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 225)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 186)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 187)
  B :MSTORE(SP + 184)
  $ => E :MLOAD(SP + 184)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 185)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 184)
  $ => E :SUB
  $ => A :MLOAD(SP + 187)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 185)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 185)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 187)
  B :MSTORE(SP + 183)
  $ => E :MLOAD(SP + 183)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 184)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 183)
  $ => E :SUB
  $ => A :MLOAD(SP + 187)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 184)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 185)
  $ => A :XOR
  A :MSTORE(SP + 183)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 187)
  B :MSTORE(SP + 181)
  $ => E :MLOAD(SP + 181)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 182)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 181)
  $ => E :SUB
  $ => A :MLOAD(SP + 187)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 182)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 183)
  $ => B :XOR
  $ => A :MLOAD(SP + 186)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  1537002063n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 194)
  $ => A :ADD
  B :MSTORE(SP + 181)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 180)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 180)
  B :MSTORE(SP + 178)
  $ => E :MLOAD(SP + 178)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 179)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 178)
  $ => E :SUB
  $ => A :MLOAD(SP + 180)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 179)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 179)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 180)
  B :MSTORE(SP + 177)
  $ => E :MLOAD(SP + 177)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 178)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 177)
  $ => E :SUB
  $ => A :MLOAD(SP + 180)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 178)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 179)
  $ => A :XOR
  A :MSTORE(SP + 177)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 180)
  B :MSTORE(SP + 175)
  $ => E :MLOAD(SP + 175)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 176)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 175)
  $ => E :SUB
  $ => A :MLOAD(SP + 180)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 176)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 177)
  $ => A :XOR
  $ => B :MLOAD(SP + 218)
  A => E
  $ => A :MLOAD(SP + 199)
  $ => C :XOR
  $ => A :MLOAD(SP + 180)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 199)
  B => D
  $ => B :MLOAD(SP + 218)
  $ => C :AND
  D => A
  C => B
  $ => B :XOR
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 175)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 454)
  B :MSTORE(SP + 173)
  $ => E :MLOAD(SP + 173)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 174)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 173)
  $ => E :SUB
  $ => A :MLOAD(SP + 454)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 174)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 174)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 454)
  B :MSTORE(SP + 172)
  $ => E :MLOAD(SP + 172)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 173)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 172)
  $ => E :SUB
  $ => A :MLOAD(SP + 454)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 173)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 174)
  $ => A :XOR
  A :MSTORE(SP + 172)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 454)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 172)
  $ => A :XOR
  $ => B :MLOAD(SP + 473)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 302)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 172)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 207)
  B :MSTORE(SP + 170)
  $ => E :MLOAD(SP + 170)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 171)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 170)
  $ => E :SUB
  $ => A :MLOAD(SP + 207)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 171)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 171)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 207)
  B :MSTORE(SP + 169)
  $ => E :MLOAD(SP + 169)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 170)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 169)
  $ => E :SUB
  $ => A :MLOAD(SP + 207)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 170)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 171)
  $ => A :XOR
  A :MSTORE(SP + 169)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 207)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 169)
  $ => B :XOR
  $ => A :MLOAD(SP + 172)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 225)
  $ => E :ADD
  A :MSTORE(SP + 169)
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 256)
  A => D
  $ => A :MLOAD(SP + 181)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 168)
  $ => B :MLOAD(SP + 206)
  $ => A :MLOAD(SP + 187)
  $ => C :XOR
  $ => A :MLOAD(SP + 168)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 206)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 167)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 168)
  B :MSTORE(SP + 165)
  $ => E :MLOAD(SP + 165)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 166)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 165)
  $ => E :SUB
  $ => A :MLOAD(SP + 168)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 166)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 166)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 168)
  B :MSTORE(SP + 164)
  $ => E :MLOAD(SP + 164)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 165)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 164)
  $ => E :SUB
  $ => A :MLOAD(SP + 168)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 165)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 166)
  $ => A :XOR
  A :MSTORE(SP + 164)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 168)
  B :MSTORE(SP + 162)
  $ => E :MLOAD(SP + 162)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 163)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 162)
  $ => E :SUB
  $ => A :MLOAD(SP + 168)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 163)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 164)
  $ => B :XOR
  $ => A :MLOAD(SP + 167)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  1747873779n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 175)
  $ => A :ADD
  B :MSTORE(SP + 162)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 161)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 161)
  B :MSTORE(SP + 159)
  $ => E :MLOAD(SP + 159)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 160)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 159)
  $ => E :SUB
  $ => A :MLOAD(SP + 161)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 160)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 160)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 161)
  B :MSTORE(SP + 158)
  $ => E :MLOAD(SP + 158)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 159)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 158)
  $ => E :SUB
  $ => A :MLOAD(SP + 161)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 159)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 160)
  $ => A :XOR
  A :MSTORE(SP + 158)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 161)
  B :MSTORE(SP + 156)
  $ => E :MLOAD(SP + 156)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 157)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 156)
  $ => E :SUB
  $ => A :MLOAD(SP + 161)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 157)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 158)
  $ => A :XOR
  $ => B :MLOAD(SP + 199)
  A => D
  $ => A :MLOAD(SP + 180)
  $ => C :XOR
  $ => A :MLOAD(SP + 161)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 180)
  B => E
  $ => B :MLOAD(SP + 199)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 156)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 435)
  B :MSTORE(SP + 154)
  $ => E :MLOAD(SP + 154)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 155)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 154)
  $ => E :SUB
  $ => A :MLOAD(SP + 435)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 155)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 155)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 435)
  B :MSTORE(SP + 153)
  $ => E :MLOAD(SP + 153)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 154)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 153)
  $ => E :SUB
  $ => A :MLOAD(SP + 435)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 154)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 155)
  $ => A :XOR
  A :MSTORE(SP + 153)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 435)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 153)
  $ => A :XOR
  $ => B :MLOAD(SP + 454)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 283)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 153)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 188)
  B :MSTORE(SP + 151)
  $ => E :MLOAD(SP + 151)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 152)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 151)
  $ => E :SUB
  $ => A :MLOAD(SP + 188)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 152)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 152)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 188)
  B :MSTORE(SP + 150)
  $ => E :MLOAD(SP + 150)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 151)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 150)
  $ => E :SUB
  $ => A :MLOAD(SP + 188)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 151)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 152)
  $ => A :XOR
  A :MSTORE(SP + 150)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 188)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 150)
  $ => B :XOR
  $ => A :MLOAD(SP + 153)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 206)
  $ => E :ADD
  A :MSTORE(SP + 150)
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 237)
  A => E
  $ => A :MLOAD(SP + 162)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 149)
  $ => B :MLOAD(SP + 187)
  $ => A :MLOAD(SP + 168)
  $ => C :XOR
  $ => A :MLOAD(SP + 149)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 187)
  $ => C :XOR
  E => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 148)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 149)
  B :MSTORE(SP + 146)
  $ => E :MLOAD(SP + 146)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 147)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 146)
  $ => E :SUB
  $ => A :MLOAD(SP + 149)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 147)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 147)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 149)
  B :MSTORE(SP + 145)
  $ => E :MLOAD(SP + 145)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 146)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 145)
  $ => E :SUB
  $ => A :MLOAD(SP + 149)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 146)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 147)
  $ => A :XOR
  A :MSTORE(SP + 145)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 149)
  B :MSTORE(SP + 143)
  $ => E :MLOAD(SP + 143)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 144)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 143)
  $ => E :SUB
  $ => A :MLOAD(SP + 149)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 144)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 145)
  $ => B :XOR
  $ => A :MLOAD(SP + 148)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  1955562222n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 156)
  $ => A :ADD
  B :MSTORE(SP + 143)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 142)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 142)
  B :MSTORE(SP + 140)
  $ => E :MLOAD(SP + 140)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 141)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 140)
  $ => E :SUB
  $ => A :MLOAD(SP + 142)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 141)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 141)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 142)
  B :MSTORE(SP + 139)
  $ => E :MLOAD(SP + 139)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 140)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 139)
  $ => E :SUB
  $ => A :MLOAD(SP + 142)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 140)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 141)
  $ => A :XOR
  A :MSTORE(SP + 139)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 142)
  B :MSTORE(SP + 137)
  $ => E :MLOAD(SP + 137)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 138)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 137)
  $ => E :SUB
  $ => A :MLOAD(SP + 142)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 138)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 139)
  $ => A :XOR
  $ => B :MLOAD(SP + 180)
  A => D
  $ => A :MLOAD(SP + 161)
  $ => C :XOR
  $ => A :MLOAD(SP + 142)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 161)
  B => E
  $ => B :MLOAD(SP + 180)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 137)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 416)
  B :MSTORE(SP + 135)
  $ => E :MLOAD(SP + 135)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 136)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 135)
  $ => E :SUB
  $ => A :MLOAD(SP + 416)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 136)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 136)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 416)
  B :MSTORE(SP + 134)
  $ => E :MLOAD(SP + 134)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 135)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 134)
  $ => E :SUB
  $ => A :MLOAD(SP + 416)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 135)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 136)
  $ => A :XOR
  A :MSTORE(SP + 134)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 416)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 134)
  $ => A :XOR
  $ => B :MLOAD(SP + 435)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 264)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 134)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 169)
  B :MSTORE(SP + 132)
  $ => E :MLOAD(SP + 132)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 133)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 132)
  $ => E :SUB
  $ => A :MLOAD(SP + 169)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 133)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 133)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 169)
  B :MSTORE(SP + 131)
  $ => E :MLOAD(SP + 131)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 132)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 131)
  $ => E :SUB
  $ => A :MLOAD(SP + 169)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 132)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 133)
  $ => A :XOR
  A :MSTORE(SP + 131)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 169)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 131)
  $ => B :XOR
  $ => A :MLOAD(SP + 134)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 187)
  $ => E :ADD
  A :MSTORE(SP + 131)
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 218)
  A => D
  $ => A :MLOAD(SP + 143)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 130)
  $ => B :MLOAD(SP + 168)
  $ => A :MLOAD(SP + 149)
  $ => C :XOR
  $ => A :MLOAD(SP + 130)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 168)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 129)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 130)
  B :MSTORE(SP + 127)
  $ => E :MLOAD(SP + 127)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 128)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 127)
  $ => E :SUB
  $ => A :MLOAD(SP + 130)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 128)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 128)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 130)
  B :MSTORE(SP + 126)
  $ => E :MLOAD(SP + 126)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 127)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 126)
  $ => E :SUB
  $ => A :MLOAD(SP + 130)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 127)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 128)
  $ => A :XOR
  A :MSTORE(SP + 126)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 130)
  B :MSTORE(SP + 124)
  $ => E :MLOAD(SP + 124)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 125)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 124)
  $ => E :SUB
  $ => A :MLOAD(SP + 130)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 125)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 126)
  $ => B :XOR
  $ => A :MLOAD(SP + 129)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  2024104815n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 137)
  $ => A :ADD
  B :MSTORE(SP + 124)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 123)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 123)
  B :MSTORE(SP + 121)
  $ => E :MLOAD(SP + 121)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 122)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 121)
  $ => E :SUB
  $ => A :MLOAD(SP + 123)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 122)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 122)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 123)
  B :MSTORE(SP + 120)
  $ => E :MLOAD(SP + 120)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 121)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 120)
  $ => E :SUB
  $ => A :MLOAD(SP + 123)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 121)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 122)
  $ => A :XOR
  A :MSTORE(SP + 120)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 123)
  B :MSTORE(SP + 118)
  $ => E :MLOAD(SP + 118)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 119)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 118)
  $ => E :SUB
  $ => A :MLOAD(SP + 123)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 119)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 120)
  $ => A :XOR
  $ => B :MLOAD(SP + 161)
  A => D
  $ => A :MLOAD(SP + 142)
  $ => C :XOR
  $ => A :MLOAD(SP + 123)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 142)
  B => E
  $ => B :MLOAD(SP + 161)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 118)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 397)
  B :MSTORE(SP + 116)
  $ => E :MLOAD(SP + 116)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 117)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 116)
  $ => E :SUB
  $ => A :MLOAD(SP + 397)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 117)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 117)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 397)
  B :MSTORE(SP + 115)
  $ => E :MLOAD(SP + 115)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 116)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 115)
  $ => E :SUB
  $ => A :MLOAD(SP + 397)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 116)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 117)
  $ => A :XOR
  A :MSTORE(SP + 115)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 397)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 115)
  $ => A :XOR
  $ => B :MLOAD(SP + 416)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 245)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 115)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 150)
  B :MSTORE(SP + 113)
  $ => E :MLOAD(SP + 113)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 114)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 113)
  $ => E :SUB
  $ => A :MLOAD(SP + 150)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 114)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 114)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 150)
  B :MSTORE(SP + 112)
  $ => E :MLOAD(SP + 112)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 113)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 112)
  $ => E :SUB
  $ => A :MLOAD(SP + 150)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 113)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 114)
  $ => A :XOR
  A :MSTORE(SP + 112)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 150)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 112)
  $ => B :XOR
  $ => A :MLOAD(SP + 115)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 168)
  $ => E :ADD
  A :MSTORE(SP + 112)
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 199)
  A => D
  $ => A :MLOAD(SP + 124)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 111)
  $ => B :MLOAD(SP + 149)
  $ => A :MLOAD(SP + 130)
  $ => C :XOR
  $ => A :MLOAD(SP + 111)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 149)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 110)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 111)
  B :MSTORE(SP + 108)
  $ => E :MLOAD(SP + 108)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 109)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 108)
  $ => E :SUB
  $ => A :MLOAD(SP + 111)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 109)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 109)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 111)
  B :MSTORE(SP + 107)
  $ => E :MLOAD(SP + 107)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 108)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 107)
  $ => E :SUB
  $ => A :MLOAD(SP + 111)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 108)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 109)
  $ => A :XOR
  A :MSTORE(SP + 107)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 111)
  B :MSTORE(SP + 105)
  $ => E :MLOAD(SP + 105)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 106)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 105)
  $ => E :SUB
  $ => A :MLOAD(SP + 111)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 106)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 107)
  $ => B :XOR
  $ => A :MLOAD(SP + 110)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  2227730452n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 118)
  $ => A :ADD
  B :MSTORE(SP + 105)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 104)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 104)
  B :MSTORE(SP + 102)
  $ => E :MLOAD(SP + 102)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 103)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 102)
  $ => E :SUB
  $ => A :MLOAD(SP + 104)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 103)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 103)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 104)
  B :MSTORE(SP + 101)
  $ => E :MLOAD(SP + 101)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 102)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 101)
  $ => E :SUB
  $ => A :MLOAD(SP + 104)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 102)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 103)
  $ => A :XOR
  A :MSTORE(SP + 101)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 104)
  B :MSTORE(SP + 99)
  $ => E :MLOAD(SP + 99)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 100)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 99)
  $ => E :SUB
  $ => A :MLOAD(SP + 104)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 100)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 101)
  $ => A :XOR
  $ => B :MLOAD(SP + 142)
  A => D
  $ => A :MLOAD(SP + 123)
  $ => C :XOR
  $ => A :MLOAD(SP + 104)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 123)
  B => E
  $ => B :MLOAD(SP + 142)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 99)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 378)
  B :MSTORE(SP + 97)
  $ => E :MLOAD(SP + 97)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 98)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 97)
  $ => E :SUB
  $ => A :MLOAD(SP + 378)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 98)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 98)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 378)
  B :MSTORE(SP + 96)
  $ => E :MLOAD(SP + 96)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 97)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 96)
  $ => E :SUB
  $ => A :MLOAD(SP + 378)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 97)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 98)
  $ => A :XOR
  A :MSTORE(SP + 96)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 378)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 96)
  $ => A :XOR
  $ => B :MLOAD(SP + 397)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 226)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 96)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 131)
  B :MSTORE(SP + 94)
  $ => E :MLOAD(SP + 94)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 95)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 94)
  $ => E :SUB
  $ => A :MLOAD(SP + 131)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 95)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 95)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 131)
  B :MSTORE(SP + 93)
  $ => E :MLOAD(SP + 93)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 94)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 93)
  $ => E :SUB
  $ => A :MLOAD(SP + 131)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 94)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 95)
  $ => A :XOR
  A :MSTORE(SP + 93)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 131)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 93)
  $ => B :XOR
  $ => A :MLOAD(SP + 96)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 149)
  $ => E :ADD
  A :MSTORE(SP + 93)
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 180)
  A => E
  $ => A :MLOAD(SP + 105)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 92)
  $ => B :MLOAD(SP + 130)
  $ => A :MLOAD(SP + 111)
  $ => C :XOR
  $ => A :MLOAD(SP + 92)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 130)
  $ => C :XOR
  E => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 91)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 92)
  B :MSTORE(SP + 89)
  $ => E :MLOAD(SP + 89)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 90)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 89)
  $ => E :SUB
  $ => A :MLOAD(SP + 92)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 90)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 90)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 92)
  B :MSTORE(SP + 88)
  $ => E :MLOAD(SP + 88)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 89)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 88)
  $ => E :SUB
  $ => A :MLOAD(SP + 92)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 89)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 90)
  $ => A :XOR
  A :MSTORE(SP + 88)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 92)
  B :MSTORE(SP + 86)
  $ => E :MLOAD(SP + 86)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 87)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 86)
  $ => E :SUB
  $ => A :MLOAD(SP + 92)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 87)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 88)
  $ => B :XOR
  $ => A :MLOAD(SP + 91)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  2361852424n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 99)
  $ => A :ADD
  B :MSTORE(SP + 86)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 85)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 85)
  B :MSTORE(SP + 83)
  $ => E :MLOAD(SP + 83)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 84)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 83)
  $ => E :SUB
  $ => A :MLOAD(SP + 85)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 84)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 84)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 85)
  B :MSTORE(SP + 82)
  $ => E :MLOAD(SP + 82)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 83)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 82)
  $ => E :SUB
  $ => A :MLOAD(SP + 85)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 83)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 84)
  $ => A :XOR
  A :MSTORE(SP + 82)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 85)
  B :MSTORE(SP + 80)
  $ => E :MLOAD(SP + 80)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 81)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 80)
  $ => E :SUB
  $ => A :MLOAD(SP + 85)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 81)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 82)
  $ => A :XOR
  $ => B :MLOAD(SP + 123)
  A => D
  $ => A :MLOAD(SP + 104)
  $ => C :XOR
  $ => A :MLOAD(SP + 85)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 104)
  B => E
  $ => B :MLOAD(SP + 123)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 80)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 359)
  B :MSTORE(SP + 78)
  $ => E :MLOAD(SP + 78)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 79)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 78)
  $ => E :SUB
  $ => A :MLOAD(SP + 359)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 79)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 79)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 359)
  B :MSTORE(SP + 77)
  $ => E :MLOAD(SP + 77)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 78)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 77)
  $ => E :SUB
  $ => A :MLOAD(SP + 359)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 78)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 79)
  $ => A :XOR
  A :MSTORE(SP + 77)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 359)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 77)
  $ => A :XOR
  $ => B :MLOAD(SP + 378)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 207)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 77)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 112)
  B :MSTORE(SP + 75)
  $ => E :MLOAD(SP + 75)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 76)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 75)
  $ => E :SUB
  $ => A :MLOAD(SP + 112)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 76)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 76)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 112)
  B :MSTORE(SP + 74)
  $ => E :MLOAD(SP + 74)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 75)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 74)
  $ => E :SUB
  $ => A :MLOAD(SP + 112)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 75)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 76)
  $ => A :XOR
  A :MSTORE(SP + 74)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 112)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 74)
  $ => B :XOR
  $ => A :MLOAD(SP + 77)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 130)
  $ => E :ADD
  A :MSTORE(SP + 74)
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 161)
  A => D
  $ => A :MLOAD(SP + 86)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 73)
  $ => B :MLOAD(SP + 111)
  $ => A :MLOAD(SP + 92)
  $ => C :XOR
  $ => A :MLOAD(SP + 73)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 111)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 72)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 73)
  B :MSTORE(SP + 70)
  $ => E :MLOAD(SP + 70)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 71)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 70)
  $ => E :SUB
  $ => A :MLOAD(SP + 73)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 71)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 71)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 73)
  B :MSTORE(SP + 69)
  $ => E :MLOAD(SP + 69)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 70)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 69)
  $ => E :SUB
  $ => A :MLOAD(SP + 73)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 70)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 71)
  $ => A :XOR
  A :MSTORE(SP + 69)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 73)
  B :MSTORE(SP + 67)
  $ => E :MLOAD(SP + 67)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 68)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 67)
  $ => E :SUB
  $ => A :MLOAD(SP + 73)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 68)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 69)
  $ => B :XOR
  $ => A :MLOAD(SP + 72)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  2428436474n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 80)
  $ => A :ADD
  B :MSTORE(SP + 67)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 66)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 66)
  B :MSTORE(SP + 64)
  $ => E :MLOAD(SP + 64)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 65)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 64)
  $ => E :SUB
  $ => A :MLOAD(SP + 66)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 65)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 65)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 66)
  B :MSTORE(SP + 63)
  $ => E :MLOAD(SP + 63)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 64)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 63)
  $ => E :SUB
  $ => A :MLOAD(SP + 66)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 64)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 65)
  $ => A :XOR
  A :MSTORE(SP + 63)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 66)
  B :MSTORE(SP + 61)
  $ => E :MLOAD(SP + 61)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 62)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 61)
  $ => E :SUB
  $ => A :MLOAD(SP + 66)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 62)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 63)
  $ => A :XOR
  $ => B :MLOAD(SP + 104)
  A => D
  $ => A :MLOAD(SP + 85)
  $ => C :XOR
  $ => A :MLOAD(SP + 66)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 85)
  B => E
  $ => B :MLOAD(SP + 104)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 61)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 340)
  B :MSTORE(SP + 59)
  $ => E :MLOAD(SP + 59)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 60)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 59)
  $ => E :SUB
  $ => A :MLOAD(SP + 340)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 60)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 60)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 340)
  B :MSTORE(SP + 58)
  $ => E :MLOAD(SP + 58)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 59)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 58)
  $ => E :SUB
  $ => A :MLOAD(SP + 340)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 59)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 60)
  $ => A :XOR
  A :MSTORE(SP + 58)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 340)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 58)
  $ => A :XOR
  $ => B :MLOAD(SP + 359)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 188)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 58)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 93)
  B :MSTORE(SP + 56)
  $ => E :MLOAD(SP + 56)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 57)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 56)
  $ => E :SUB
  $ => A :MLOAD(SP + 93)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 57)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 57)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 93)
  B :MSTORE(SP + 55)
  $ => E :MLOAD(SP + 55)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 56)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 55)
  $ => E :SUB
  $ => A :MLOAD(SP + 93)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 56)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 57)
  $ => A :XOR
  A :MSTORE(SP + 55)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 93)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 55)
  $ => B :XOR
  $ => A :MLOAD(SP + 58)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 111)
  $ => E :ADD
  A :MSTORE(SP + 55)
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 142)
  A => D
  $ => A :MLOAD(SP + 67)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 54)
  $ => B :MLOAD(SP + 92)
  $ => A :MLOAD(SP + 73)
  $ => C :XOR
  $ => A :MLOAD(SP + 54)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 92)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 53)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 54)
  B :MSTORE(SP + 51)
  $ => E :MLOAD(SP + 51)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 52)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 51)
  $ => E :SUB
  $ => A :MLOAD(SP + 54)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 52)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 52)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 54)
  B :MSTORE(SP + 50)
  $ => E :MLOAD(SP + 50)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 51)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 50)
  $ => E :SUB
  $ => A :MLOAD(SP + 54)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 51)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 52)
  $ => A :XOR
  A :MSTORE(SP + 50)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 54)
  B :MSTORE(SP + 48)
  $ => E :MLOAD(SP + 48)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 49)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 48)
  $ => E :SUB
  $ => A :MLOAD(SP + 54)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 49)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 50)
  $ => B :XOR
  $ => A :MLOAD(SP + 53)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  2756734187n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 61)
  $ => A :ADD
  B :MSTORE(SP + 48)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 47)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 47)
  B :MSTORE(SP + 45)
  $ => E :MLOAD(SP + 45)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 46)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 45)
  $ => E :SUB
  $ => A :MLOAD(SP + 47)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 46)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 46)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 47)
  B :MSTORE(SP + 44)
  $ => E :MLOAD(SP + 44)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 45)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 44)
  $ => E :SUB
  $ => A :MLOAD(SP + 47)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 45)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 46)
  $ => A :XOR
  A :MSTORE(SP + 44)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 47)
  B :MSTORE(SP + 42)
  $ => E :MLOAD(SP + 42)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 43)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 42)
  $ => E :SUB
  $ => A :MLOAD(SP + 47)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 43)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 44)
  $ => A :XOR
  $ => B :MLOAD(SP + 85)
  A => D
  $ => A :MLOAD(SP + 66)
  $ => C :XOR
  $ => A :MLOAD(SP + 47)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 66)
  B => E
  $ => B :MLOAD(SP + 85)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 42)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 321)
  B :MSTORE(SP + 40)
  $ => E :MLOAD(SP + 40)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 41)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 40)
  $ => E :SUB
  $ => A :MLOAD(SP + 321)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 41)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 41)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 321)
  B :MSTORE(SP + 39)
  $ => E :MLOAD(SP + 39)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 40)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 39)
  $ => E :SUB
  $ => A :MLOAD(SP + 321)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 40)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 41)
  $ => A :XOR
  A :MSTORE(SP + 39)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 321)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 39)
  $ => B :XOR
  $ => A :MLOAD(SP + 340)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 169)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 39)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 74)
  B :MSTORE(SP + 37)
  $ => E :MLOAD(SP + 37)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 38)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 37)
  $ => E :SUB
  $ => A :MLOAD(SP + 74)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 38)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 38)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 74)
  B :MSTORE(SP + 36)
  $ => E :MLOAD(SP + 36)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 37)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 36)
  $ => E :SUB
  $ => A :MLOAD(SP + 74)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 37)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 38)
  $ => A :XOR
  A :MSTORE(SP + 36)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 74)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 36)
  $ => B :XOR
  $ => A :MLOAD(SP + 39)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 92)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 123)
  A => D
  $ => A :MLOAD(SP + 48)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 36)
  $ => B :MLOAD(SP + 73)
  $ => A :MLOAD(SP + 54)
  $ => C :XOR
  $ => A :MLOAD(SP + 36)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 73)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 35)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 36)
  B :MSTORE(SP + 33)
  $ => E :MLOAD(SP + 33)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 34)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 33)
  $ => E :SUB
  $ => A :MLOAD(SP + 36)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 34)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 34)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 36)
  B :MSTORE(SP + 32)
  $ => E :MLOAD(SP + 32)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 33)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 32)
  $ => E :SUB
  $ => A :MLOAD(SP + 36)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 33)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 34)
  $ => A :XOR
  A :MSTORE(SP + 32)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 36)
  B :MSTORE(SP + 30)
  $ => E :MLOAD(SP + 30)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 31)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 30)
  $ => E :SUB
  $ => A :MLOAD(SP + 36)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 31)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 32)
  $ => B :XOR
  $ => A :MLOAD(SP + 35)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  3204031479n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 42)
  $ => A :ADD
  B :MSTORE(SP + 30)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 29)
  $ => B :MLOAD(SP + 66)
  $ => A :MLOAD(SP + 47)
  $ => C :XOR
  $ => A :MLOAD(SP + 29)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 47)
  B => D
  $ => B :MLOAD(SP + 66)
  $ => C :AND
  D => A
  C => B
  $ => A :XOR
  $ => B :MLOAD(SP + 3)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 28)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 29)
  B :MSTORE(SP + 3)
  $ => E :MLOAD(SP + 3)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 27)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3)
  $ => E :SUB
  $ => A :MLOAD(SP + 29)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 27)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 27)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 29)
  B :MSTORE(SP + 26)
  $ => E :MLOAD(SP + 26)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 26)
  $ => E :SUB
  $ => A :MLOAD(SP + 29)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 27)
  $ => A :XOR
  A :MSTORE(SP + 26)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 29)
  B :MSTORE(SP + 25)
  $ => E :MLOAD(SP + 25)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 25)
  $ => E :SUB
  $ => A :MLOAD(SP + 29)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 26)
  $ => B :XOR
  $ => A :MLOAD(SP + 28)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 25)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 302)
  B :MSTORE(SP + 3)
  $ => E :MLOAD(SP + 3)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 24)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3)
  $ => E :SUB
  $ => A :MLOAD(SP + 302)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 24)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 24)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 302)
  B :MSTORE(SP + 23)
  $ => E :MLOAD(SP + 23)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 23)
  $ => E :SUB
  $ => A :MLOAD(SP + 302)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 24)
  $ => A :XOR
  A :MSTORE(SP + 23)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 302)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 23)
  $ => B :XOR
  $ => A :MLOAD(SP + 321)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 150)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 23)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 55)
  B :MSTORE(SP + 3)
  $ => E :MLOAD(SP + 3)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 22)
  A :MSTORE(SP + 55)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3)
  $ => E :SUB
  $ => A :MLOAD(SP + 55)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 22)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 22)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 55)
  B :MSTORE(SP + 21)
  $ => E :MLOAD(SP + 21)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 21)
  $ => E :SUB
  $ => A :MLOAD(SP + 55)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 22)
  $ => A :XOR
  A :MSTORE(SP + 21)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 55)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 21)
  $ => B :XOR
  $ => A :MLOAD(SP + 23)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 73)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 104)
  A => E
  $ => A :MLOAD(SP + 30)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 21)
  $ => B :MLOAD(SP + 54)
  $ => A :MLOAD(SP + 36)
  $ => C :XOR
  $ => A :MLOAD(SP + 21)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 54)
  $ => C :XOR
  E => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 20)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 21)
  B :MSTORE(SP + 3)
  $ => E :MLOAD(SP + 3)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 19)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3)
  $ => E :SUB
  $ => A :MLOAD(SP + 21)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 19)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 19)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 21)
  B :MSTORE(SP + 18)
  $ => E :MLOAD(SP + 18)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 18)
  $ => E :SUB
  $ => A :MLOAD(SP + 21)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 19)
  $ => A :XOR
  A :MSTORE(SP + 18)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 21)
  B :MSTORE(SP + 3)
  $ => E :MLOAD(SP + 3)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 17)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3)
  $ => E :SUB
  $ => A :MLOAD(SP + 21)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 17)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 18)
  $ => B :XOR
  $ => A :MLOAD(SP + 20)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  3329325298n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 25)
  $ => A :ADD
  B => E
  4294967295n => B  ;; LoadConst64
  $ => C :AND
  $ => A :MLOAD(SP + 29)
  $ => B :MLOAD(SP + 1)
  C :MSTORE(SP + 16)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => C :AND
  $ => A :MLOAD(SP + 85)
  $ => B :MLOAD(SP + 5)
  C :MSTORE(SP + 15)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  E => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 12)
  $ => B :MLOAD(SP + 2)
  $ => A :MLOAD(SP + 47)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => D :AND
  $ => A :MLOAD(SP + 21)
  $ => B :MLOAD(SP + 7)
  D :MSTORE(SP + 14)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => C :AND
  $ => A :MLOAD(SP + 66)
  $ => B :MLOAD(SP + 13)
  C :MSTORE(SP + 11)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  B :MSTORE(SP + 13)
  $ => B :MLOAD(SP + 6)
  $ => A :MLOAD(SP + 36)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  B :MSTORE(SP + 10)
  $ => B :MLOAD(SP + 4)
  $ => A :MLOAD(SP + 54)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  B :MSTORE(SP + 9)
  64n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 8)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => E :AND
  E => A
  $ => B :MLOAD(SP + 1177)
  $ => A :EQ
  1 - A => A
  A :JMPNZ(label_3_4)
  :JMP(label_3_5)
label_3_4:
  $ => A :MLOAD(SP + 14)
  $ => B :MLOAD(SP + 15)
  $ => C :MLOAD(SP + 15)
  C :MSTORE(SP + 1)
  $ => C :MLOAD(SP + 14)
  C :MSTORE(SP + 2)
  $ => C :MLOAD(SP + 16)
  C :MSTORE(SP + 3)
  $ => C :MLOAD(SP + 9)
  C :MSTORE(SP + 4)
  $ => C :MLOAD(SP + 12)
  C :MSTORE(SP + 5)
  $ => C :MLOAD(SP + 10)
  C :MSTORE(SP + 6)
  $ => C :MLOAD(SP + 11)
  C :MSTORE(SP + 7)
  E :MSTORE(SP + 8)
  :JMP(label_3_3)
label_3_5:
  :JMP(label_3_7)
label_3_7:
  0 => A  ;; LoadExtName(User(userextname0))
  $ => B :MLOAD(SP)
  $ => E :ADD
  $ => A :MLOAD(SP + 9)
  A :MSTORE(MEM:E + 28)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => E :ADD
  $ => C :MLOAD(SP + 10)
  C :MSTORE(MEM:E + 24)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => E :ADD
  $ => C :MLOAD(SP + 11)
  C :MSTORE(MEM:E + 20)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => E :ADD
  $ => A :MLOAD(SP + 12)
  A :MSTORE(MEM:E + 16)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => E :ADD
  $ => D :MLOAD(SP + 13)
  D :MSTORE(MEM:E + 12)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => E :ADD
  $ => D :MLOAD(SP + 14)
  D :MSTORE(MEM:E + 8)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => E :ADD
  $ => C :MLOAD(SP + 15)
  C :MSTORE(MEM:E + 4)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => E :ADD
  $ => B :MLOAD(SP + 16)
  B :MSTORE(MEM:E)
  SP + 1182 => SP
  $ => C :MLOAD(SP - 1)
  $ => D :MLOAD(SP - 2)
  $ => E :MLOAD(SP - 3)
  $ => B :MLOAD(SP - 4)
  SP + 1 => SP
  $ => RR :MLOAD(SP)
  :JMP(RR)
function_4:
  RR :MSTORE(SP)
  SP - 1 => SP
  C :MSTORE(SP - 1)
  SP - 2 => SP
  $ => C :MLOAD(fp + 16)
  SP - 1 => SP
  C :MSTORE(SP)
  zkPC + 2 => RR
  :JMP(function_5)
  SP + 1 => SP
  SP + 2 => SP
  $ => C :MLOAD(SP - 1)
  SP + 1 => SP
  $ => RR :MLOAD(SP)
  :JMP(RR)
function_5:
  RR :MSTORE(SP)
  SP - 1 => SP
  C :MSTORE(SP - 1)
  D :MSTORE(SP - 2)
  E :MSTORE(SP - 3)
  B :MSTORE(SP - 4)
  SP - 10 => SP
  A :MSTORE(SP)
  B :MSTORE(SP + 1)
  $ => A :MLOAD(fp + 16)
  A :MSTORE(SP + 2)
  15n => B  ;; LoadConst32
  A => C
  B => A
  C => B
  $ => A :LT
  A :JMPNZ(label_5_2)
  $ => E :MLOAD(SP + 2)
  $ => C :MLOAD(SP)
  C :MSTORE(SP + 2)
  :JMP(label_5_17)
label_5_2:
  0n => A  ;; LoadConst32
  $ => B :MLOAD(SP)
  $ => A :SUB
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  3n => B  ;; LoadConst32
  $ => B :AND
  $ => A :MLOAD(SP)
  $ => C :ADD
  C => A
  B :MSTORE(SP + 3)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 5)
  0n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 3)
  $ => A :EQ
  A :JMPNZ(label_5_3)
  :JMP(label_5_4)
label_5_3:
  $ => A :MLOAD(SP + 2)
  $ => B :MLOAD(SP + 3)
  :JMP(label_5_9)
label_5_4:
  $ => B :MLOAD(SP)
  :JMP(label_5_5)
label_5_5:
  0 => A  ;; LoadExtName(User(userextname0))
  $ => E :ADD
  B => A
  $ => B :MLOAD(SP + 1)
  B :MSTORE(MEM:E)
  1n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => E :AND
  E => A
  $ => B :MLOAD(SP + 5)
  $ => A :LT
  A :JMPNZ(label_5_6)
  :JMP(label_5_7)
label_5_6:
  E => B
  :JMP(label_5_5)
label_5_7:
  $ => A :MLOAD(SP + 2)
  $ => B :MLOAD(SP + 3)
  :JMP(label_5_9)
label_5_9:
  $ => A :SUB
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  4294967292n => B  ;; LoadConst32
  $ => B :AND
  A :MSTORE(SP + 4)
  $ => A :MLOAD(SP + 5)
  $ => D :ADD
  B => C
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2)
  1n => B  ;; LoadConst32
  C => A
  B => C  ;; Extend A.
  A => B
  B => A
  0x80000000n => B
  $ => A: XOR
  $ => A: SUB
  C => B  ;; Extend B.
  A => C
  B => A
  0x80000000n => B
  $ => A: XOR
  $ => A: SUB
  A => B
  C => A
  $ => A :SLT
  A :JMPNZ(label_5_10)
  :JMP(label_5_11)
label_5_10:
  :JMP(label_5_16)
label_5_11:
  255n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 1)
  $ => C :AND
  C => A
  16843009n => B  ;; LoadConst32
  0 => C
  $${var _mulArith = A * B}
  ${_mulArith >> 64} => D
  ${_mulArith} => A :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  B :MSTORE(SP + 3)
  $ => B :MLOAD(SP + 5)
  :JMP(label_5_12)
label_5_12:
  0 => A  ;; LoadExtName(User(userextname0))
  $ => E :ADD
  B => A
  $ => B :MLOAD(SP + 3)
  B :MSTORE(MEM:E)
  4n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => E :AND
  E => A
  $ => B :MLOAD(SP + 2)
  $ => A :LT
  A :JMPNZ(label_5_13)
  :JMP(label_5_14)
label_5_13:
  E => B
  :JMP(label_5_12)
label_5_14:
  :JMP(label_5_16)
label_5_16:
  3n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 4)
  $ => E :AND
  :JMP(label_5_17)
label_5_17:
  0n => B  ;; LoadConst32
  E => A
  $ => A :EQ
  E => B
  A :JMPNZ(label_5_18)
  :JMP(label_5_19)
label_5_18:
  :JMP(label_5_24)
label_5_19:
  $ => A :MLOAD(SP + 2)
  $ => D :ADD
  D => A
  4294967295n => B  ;; LoadConst64
  $ => C :AND
  C :MSTORE(SP + 3)
  $ => B :MLOAD(SP + 2)
  :JMP(label_5_20)
label_5_20:
  0 => A  ;; LoadExtName(User(userextname0))
  $ => E :ADD
  B => C
  $ => A :MLOAD(SP + 1)
  A :MSTORE(MEM:E)
  1n => B  ;; LoadConst32
  C => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => E :AND
  E => A
  $ => B :MLOAD(SP + 3)
  $ => A :LT
  A :JMPNZ(label_5_21)
  :JMP(label_5_22)
label_5_21:
  E => B
  :JMP(label_5_20)
label_5_22:
  :JMP(label_5_24)
label_5_24:
  $ => A :MLOAD(SP)
  SP + 10 => SP
  $ => C :MLOAD(SP - 1)
  $ => D :MLOAD(SP - 2)
  $ => E :MLOAD(SP - 3)
  $ => B :MLOAD(SP - 4)
  SP + 1 => SP
  $ => RR :MLOAD(SP)
  :JMP(RR)
finalizeExecution:
  ${beforeLast()}  :JMPN(finalizeExecution)
                   :JMP(start)
INCLUDE "helpers/2-exp.zkasm"